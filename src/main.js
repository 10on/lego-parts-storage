// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class LegoStorageApp {
    constructor() {
        this.currentView = 'home';
        this.containers = [];
        this.pileItems = [];
        this.mockData = new MockData();
        this.storage = null; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∂–µ
        
        this.init();
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LEGO Storage Mapper');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ LoadingProgress –∑–∞–≥—Ä—É–∂–µ–Ω
        if (typeof LoadingProgress === 'undefined') {
            console.error('‚ùå LoadingProgress –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const initProgress = LoadingProgress.createAppInitProgress();
        
        if (!initProgress) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä');
            return;
        }
        
        try {
            // –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            initProgress.updateStep(0, 50, '–ü–æ–∏—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            this.storage = new LocalStorageAdapter();
            initProgress.completeStep(0, '–•—Ä–∞–Ω–∏–ª–∏—â–µ –≥–æ—Ç–æ–≤–æ');
            
            // –≠—Ç–∞–ø 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB
            initProgress.updateStep(1, 50, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
            this.imageManager = new ImageManager();
            window.imageManager = this.imageManager;
            initProgress.completeStep(1, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
            
            // –≠—Ç–∞–ø 3: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–µ—Ç–∞–ª–µ–π
            initProgress.updateStep(2, 0, '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö BrickLink...');
            await this.loadBrickLinkData(false); // –û—Ç–∫–ª—é—á–∞–µ–º LCX –ø—Ä–æ–≥—Ä–µ—Å—Å
            initProgress.updateStep(2, 50, '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞...');
            await this.loadMockData();
            initProgress.completeStep(2, '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            
            // –≠—Ç–∞–ø 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            initProgress.updateStep(3, 25, '–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
            this.sidebar = new Sidebar();
            this.homeView = new HomeView();
            this.containerView = new ContainerView();
            this.pileView = new PileView();
            this.splitView = new SplitView();
            this.duplicatesView = new DuplicatesView();
            this.importView = new ImportView();
            this.settingsView = new SettingsView();
            
            initProgress.updateStep(3, 75, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
            this.setupEventListeners();
            this.router = new Router();
            this.router.init();
            
            initProgress.updateStep(3, 100, '–ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
            this.showView('home');
            
            initProgress.completeStep(3, '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!');
            
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                initProgress.hide();
            }, 1000);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            initProgress.showError(initProgress.currentStep, error.message);
            setTimeout(() => {
                initProgress.hide();
            }, 3000);
        }
    }

    async loadBrickLinkData(showProgress = true) {
        try {
            console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö BrickLink...');
            await window.brickLinkData.loadData(showProgress);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö BrickLink:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', 'warning');
            // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –±–µ–∑ BrickLink –¥–∞–Ω–Ω—ã—Ö
        }
    }

    async loadMockData() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ LocalStorage
            const project = await this.storage.loadProject();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
            const hasExistingProject = localStorage.getItem('lego-storage-project') !== null;
            
            if (project.containers && project.containers.length > 0) {
                // –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
                this.containers = project.containers;
                this.pileItems = project.pileItems || [];
                console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ LocalStorage:', this.containers.length, '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤');
            } else if (!hasExistingProject) {
                // –°–æ–≤—Å–µ–º –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ localStorage) - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                this.containers = this.mockData.getContainers();
                this.pileItems = this.mockData.getPileItems();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ LocalStorage
                await this.saveProject();
                console.log('üÜï –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.containers.length, '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤');
            } else {
                // –ü—Ä–æ–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—É—Å—Ç—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –≤—Å–µ) - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
                this.containers = [];
                this.pileItems = project.pileItems || [];
                console.log('üìÇ –ü—Ä–æ–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (—É–¥–∞–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –≤ localStorage
            const hasAnyData = localStorage.getItem('lego-storage-project') !== null;
            
            if (!hasAnyData) {
                // –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                this.containers = this.mockData.getContainers();
                this.pileItems = this.mockData.getPileItems();
                console.log('üîß –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ + –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            } else {
                // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏
                this.containers = [];
                this.pileItems = [];
                console.log('üîß –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏');
            }
        }
    }

    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const view = link.dataset.view;
                this.showView(view);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        document.getElementById('add-container-btn')?.addEventListener('click', () => {
            this.showAddContainerModal();
        });

        document.getElementById('back-to-home')?.addEventListener('click', () => {
            this.showView('home');
        });

        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        document.getElementById('modal-close')?.addEventListener('click', () => {
            this.hideModal();
        });

        document.getElementById('modal-overlay')?.addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                this.hideModal();
            }
        });
    }

    showView(viewName) {
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∏–¥—ã
        document.querySelectorAll('.view').forEach(view => {
            view.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∏–¥
        const targetView = document.getElementById(`${viewName}-view`);
        if (targetView) {
            targetView.classList.add('active');
            this.currentView = viewName;
            
            // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            document.querySelector(`[data-view="${viewName}"]`)?.classList.add('active');
            
            // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∏–¥–∞
            this.updateViewContent(viewName);
        }
    }

    getCurrentView() {
        return this.currentView;
    }

    updateViewContent(viewName) {
        switch (viewName) {
            case 'home':
                this.homeView.render(this.containers);
                break;
            case 'containers':
                this.showView('home'); // –ü–æ–∫–∞ —á—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ home
                break;
            case 'pile':
                this.pileView.render(this.pileItems);
                break;
            case 'split':
                this.splitView.render();
                break;
            case 'duplicates':
                this.duplicatesView.render();
                break;
            case 'import':
                this.importView.render();
                break;
            case 'settings':
                this.settingsView.render();
                break;
        }
    }

    showModal(title, content) {
        document.getElementById('modal-title').textContent = title;
        document.getElementById('modal-body').innerHTML = content;
        document.getElementById('modal-overlay').classList.add('active');
    }

    hideModal() {
        document.getElementById('modal-overlay').classList.remove('active');
    }

    showAddContainerModal() {
        const content = `
            <form id="add-container-form">
                <div class="form-group">
                    <label class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞</label>
                    <input type="text" class="form-input" id="container-name" placeholder="–ú–æ—è –∫–∞—Å—Å–µ—Ç–Ω–∏—Ü–∞" required>
                </div>
                <div class="form-group">
                    <label class="form-label">–¢–∏–ø</label>
                    <select class="form-select" id="container-type">
                        <option value="cabinet">–ö–∞—Å—Å–µ—Ç–Ω–∏—Ü–∞</option>
                        <option value="box">–ö–æ—Ä–æ–±–∫–∞</option>
                        <option value="pile">–ö—É—á–∞</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏</label>
                    <div class="form-row">
                        <div class="form-group">
                            <input type="number" class="form-input" id="grid-rows" placeholder="–°—Ç—Ä–æ–∫–∏" value="8" min="1" max="50">
                        </div>
                        <div class="form-group">
                            <input type="number" class="form-input" id="grid-cols" placeholder="–°—Ç–æ–ª–±—Ü—ã" value="4" min="1" max="50">
                        </div>
                    </div>
                    <div class="form-help">
                        <small>–ú–∞–∫—Å–∏–º—É–º: 50√ó50 —è—á–µ–µ–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 20√ó20 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.</small>
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-label">–¶–≤–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞</label>
                    <div class="color-picker-container">
                        <input type="color" class="color-picker" id="container-color" value="#e0e0e0">
                        <input type="text" class="form-input color-input" id="container-color-hex" placeholder="#e0e0e0" value="#e0e0e0">
                        <button type="button" class="btn btn-outline btn-sm" id="clear-color">–û—á–∏—Å—Ç–∏—Ç—å</button>
                    </div>
                    <div class="color-preview" id="color-preview">
                        <div class="preview-label">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</div>
                        <div class="preview-grid" id="preview-grid"></div>
                    </div>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä</button>
                </div>
            </form>
        `;
        
        this.showModal('–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', content);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
        document.getElementById('add-container-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.createContainer();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ color picker
        this.setupColorPicker();
    }

    setupColorPicker() {
        const colorPicker = document.getElementById('container-color');
        const colorInput = document.getElementById('container-color-hex');
        const clearBtn = document.getElementById('clear-color');
        const rowsInput = document.getElementById('grid-rows');
        const colsInput = document.getElementById('grid-cols');
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è color picker –∏ text input
        colorPicker.addEventListener('input', (e) => {
            colorInput.value = e.target.value;
            this.updateColorPreview();
        });
        
        colorInput.addEventListener('input', (e) => {
            if (this.isValidHex(e.target.value)) {
                colorPicker.value = e.target.value;
                this.updateColorPreview();
            }
        });
        
        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ü–≤–µ—Ç–∞
        clearBtn.addEventListener('click', () => {
            colorPicker.value = '#e0e0e0';
            colorInput.value = '#e0e0e0';
            this.updateColorPreview();
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        rowsInput.addEventListener('input', () => this.updateColorPreview());
        colsInput.addEventListener('input', () => this.updateColorPreview());
        
        // –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        this.updateColorPreview();
    }
    
    isValidHex(hex) {
        return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(hex);
    }
    
    updateColorPreview() {
        const rows = parseInt(document.getElementById('grid-rows').value) || 8;
        const cols = parseInt(document.getElementById('grid-cols').value) || 4;
        const color = document.getElementById('container-color').value;
        const previewGrid = document.getElementById('preview-grid');
        
        if (!previewGrid) return;
        
        previewGrid.innerHTML = '';
        previewGrid.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
        previewGrid.style.gridTemplateRows = `repeat(${rows}, 1fr)`;
        previewGrid.style.backgroundColor = color;
        previewGrid.style.border = `2px solid ${this.darkenColor(color, 20)}`;
        
        // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏
        for (let i = 0; i < rows * cols; i++) {
            const cell = document.createElement('div');
            cell.className = 'preview-cell';
            cell.style.backgroundColor = 'white';
            cell.style.border = '1px solid #ddd';
            cell.style.minHeight = '8px';
            cell.style.minWidth = '8px';
            previewGrid.appendChild(cell);
        }
    }
    
    darkenColor(color, percent) {
        const num = parseInt(color.replace("#", ""), 16);
        const amt = Math.round(2.55 * percent);
        const R = (num >> 16) - amt;
        const G = (num >> 8 & 0x00FF) - amt;
        const B = (num & 0x0000FF) - amt;
        return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
            (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
            (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
    }

    async createContainer() {
        const name = document.getElementById('container-name').value;
        const type = document.getElementById('container-type').value;
        const rows = parseInt(document.getElementById('grid-rows').value);
        const cols = parseInt(document.getElementById('grid-cols').value);
        const color = document.getElementById('container-color').value;
        
        const container = {
            id: Date.now().toString(),
            name,
            type,
            rows,
            cols,
            color,
            cells: Array(rows * cols).fill(null),
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
        
        this.containers.push(container);
        this.hideModal();
        this.updateViewContent('home');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        await this.autoSave();
        
        this.showNotification('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω!', 'success');
    }

    async saveProject() {
        try {
            const project = {
                containers: this.containers,
                pileItems: this.pileItems,
                settings: {
                    storageAdapter: 'local',
                    imageSource: 'bricklink',
                    theme: 'light'
                },
                updatedAt: new Date().toISOString(),
                version: '1.0'
            };
            
            await this.storage.saveProject(project);
            console.log('üíæ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ LocalStorage');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
            return false;
        }
    }

    async loadProject() {
        try {
            const project = await this.storage.loadProject();
            this.containers = project.containers || [];
            this.pileItems = project.pileItems || [];
            console.log('üì¶ –ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ LocalStorage');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
            return false;
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    async autoSave() {
        if (this.autoSaveTimeout) {
            clearTimeout(this.autoSaveTimeout);
        }
        
        this.autoSaveTimeout = setTimeout(async () => {
            await this.saveProject();
        }, 1000); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <div class="notification-header">
                <div class="notification-title">${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</div>
                <button class="notification-close">&times;</button>
            </div>
            <div class="notification-message">${message}</div>
        `;
        
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.remove();
        }, 3000);
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É
        notification.querySelector('.notification-close').addEventListener('click', () => {
            notification.remove();
        });
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.app = new LegoStorageApp();
});
