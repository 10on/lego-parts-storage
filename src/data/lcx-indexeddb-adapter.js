/**
 * LCX-compatible IndexedDB Adapter
 * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ IndexedDBAdapter –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ LCX-Tabular —Ñ–æ—Ä–º–∞—Ç–∞
 */

class LCXIndexedDBAdapter {
    constructor(dbName = 'BrickLinkDB', version = 2) {
        this.dbName = dbName;
        this.version = version;
        this.db = null;
        this.lcxParser = new LCXParser();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π LCX —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
     */
    async init() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(this.dbName, this.version);

            request.onerror = () => {
                reject(new Error('Failed to open IndexedDB'));
            };

            request.onsuccess = (event) => {
                this.db = event.target.result;
                console.log('‚úÖ LCX IndexedDB initialized');
                resolve(this.db);
            };

            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                
                // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                if (!db.objectStoreNames.contains('categories')) {
                    const categoriesStore = db.createObjectStore('categories', { keyPath: 'id' });
                    categoriesStore.createIndex('name', 'name', { unique: false });
                }

                // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
                if (!db.objectStoreNames.contains('colors')) {
                    const colorsStore = db.createObjectStore('colors', { keyPath: 'id' });
                    colorsStore.createIndex('name', 'name', { unique: false });
                    colorsStore.createIndex('parts', 'parts', { unique: false });
                    colorsStore.createIndex('type', 'type', { unique: false });
                } else if (event.oldVersion < 2) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –¥–ª—è v2
                    const transaction = event.target.transaction;
                    const colorsStore = transaction.objectStore('colors');
                    if (!colorsStore.indexNames.contains('type')) {
                        colorsStore.createIndex('type', 'type', { unique: false });
                    }
                }

                // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
                if (!db.objectStoreNames.contains('parts')) {
                    const partsStore = db.createObjectStore('parts', { keyPath: 'partId' });
                    partsStore.createIndex('name', 'name', { unique: false });
                    partsStore.createIndex('catId', 'catId', { unique: false });
                    partsStore.createIndex('blId', 'blId', { unique: false });
                    partsStore.createIndex('nameAndId', ['name', 'partId'], { unique: false });
                } else if (event.oldVersion < 2) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –¥–ª—è v2
                    const transaction = event.target.transaction;
                    const partsStore = transaction.objectStore('parts');
                    if (!partsStore.indexNames.contains('catId')) {
                        partsStore.createIndex('catId', 'catId', { unique: false });
                    }
                    if (!partsStore.indexNames.contains('blId')) {
                        partsStore.createIndex('blId', 'blId', { unique: false });
                    }
                }

                // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–≤—è–∑–µ–π –¥–µ—Ç–∞–ª—å-—Ü–≤–µ—Ç (–Ω–æ–≤–æ–µ –≤ v2)
                if (!db.objectStoreNames.contains('partColors')) {
                    const partColorsStore = db.createObjectStore('partColors', { keyPath: ['partId', 'colorId'] });
                    partColorsStore.createIndex('partId', 'partId', { unique: false });
                    partColorsStore.createIndex('colorId', 'colorId', { unique: false });
                    partColorsStore.createIndex('hasImg', 'hasImg', { unique: false });
                }

                // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                if (!db.objectStoreNames.contains('metadata')) {
                    db.createObjectStore('metadata', { keyPath: 'key' });
                }

                console.log('üì¶ LCX IndexedDB schema created/updated');
            };
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ LCX —Ñ–∞–π–ª–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    async loadFromLCX(lcxFile, progressCallback = null) {
        console.log('üîÑ Loading data from LCX to IndexedDB...');
        
        try {
            // –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if (progressCallback) progressCallback(1, 0, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            await this.init();
            
            // –®–∞–≥ 2: –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞
            if (progressCallback) progressCallback(2, 0, '–ü–∞—Ä—Å–∏–Ω–≥ LCX —Ñ–∞–π–ª–∞...');
            const transformedData = await this.lcxParser.parse(lcxFile, progressCallback);
            
            // –®–∞–≥ 3-6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (—à–∞–≥–∏ 3-6 –≤ saveLCXData)
            if (progressCallback) progressCallback(3, 0, '–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
            await this.saveLCXData(transformedData, progressCallback);
            
            // –®–∞–≥ 7: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            if (progressCallback) progressCallback(7, 0, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...');
            await this.setMetadata('lastUpdate', { 
                timestamp: Date.now(),
                source: 'lcx',
                version: transformedData.metadata.version
            });
            await this.setMetadata('lcxMetadata', transformedData.metadata);

            if (progressCallback) progressCallback(7, 100, '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            
            const stats = this.lcxParser.getStats(transformedData);
            console.log('‚úÖ LCX data loaded to IndexedDB:', stats);
            
            return stats;
        } catch (error) {
            console.error('‚ùå Failed to load LCX data:', error);
            if (progressCallback) progressCallback(-1, 0, `–û—à–∏–±–∫–∞: ${error.message}`);
            throw error;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç LCX –¥–∞–Ω–Ω—ã–µ –≤ IndexedDB —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    async saveLCXData(transformedData, progressCallback = null) {
        try {
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (progressCallback) progressCallback(6, 10, '–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            await Promise.all([
                this.clearStore('categories'),
                this.clearStore('colors'), 
                this.clearStore('parts'),
                this.clearStore('partColors')
            ]);

            // –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (progressCallback) progressCallback(3, 0, `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${transformedData.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π...`);
            await this.saveBulkDataWithProgress('categories', transformedData.categories, progressCallback);
            console.log(`üì¶ Saved ${transformedData.categories.length} categories`);

            // –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç–∞
            if (progressCallback) progressCallback(4, 0, `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${transformedData.colors.length} —Ü–≤–µ—Ç–æ–≤...`);
            await this.saveBulkDataWithProgress('colors', transformedData.colors, progressCallback);
            console.log(`üé® Saved ${transformedData.colors.length} colors`);

            // –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –º–∞—Å—Å–∏–≤)
            if (progressCallback) progressCallback(5, 0, `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${transformedData.parts.length} –¥–µ—Ç–∞–ª–µ–π...`);
            await this.saveBulkDataWithProgress('parts', transformedData.parts, progressCallback);
            console.log(`üß± Saved ${transformedData.parts.length} parts`);

            // –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∏ –¥–µ—Ç–∞–ª—å-—Ü–≤–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (transformedData.partColors && transformedData.partColors.length > 0) {
                if (progressCallback) progressCallback(6, 0, `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${transformedData.partColors.length} —Å–≤—è–∑–µ–π...`);
                await this.saveBulkDataWithProgress('partColors', transformedData.partColors, progressCallback);
                console.log(`üîó Saved ${transformedData.partColors.length} part-color relations`);
            } else {
                if (progressCallback) progressCallback(6, 0, '–°–≤—è–∑–∏ –¥–µ—Ç–∞–ª—å-—Ü–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            }

            console.log('‚úÖ All LCX data saved to IndexedDB');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è LCX –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    /**
     * –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async saveBulkData(store, data) {
        const batchSize = 1000;
        
        for (let i = 0; i < data.length; i += batchSize) {
            const batch = data.slice(i, i + batchSize);
            await Promise.all(batch.map(item => {
                return new Promise((resolve, reject) => {
                    const request = store.add(item);
                    request.onsuccess = () => resolve();
                    request.onerror = () => reject(request.error);
                });
            }));
            
            if (i % 5000 === 0 && i > 0) {
                console.log(`üì¶ Processed ${i}/${data.length} items...`);
            }
        }
    }

    /**
     * –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    async saveBulkDataWithProgress(storeName, data, progressCallback) {
        const batchSize = 100; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        const totalItems = data.length;
        let processedItems = 0;
        
        for (let i = 0; i < totalItems; i += batchSize) {
            const batch = data.slice(i, i + batchSize);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
            const transaction = this.db.transaction([storeName], 'readwrite');
            const store = transaction.objectStore(storeName);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á (–∏—Å–ø–æ–ª—å–∑—É–µ–º put –≤–º–µ—Å—Ç–æ add –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            await Promise.all(batch.map(item => {
                return new Promise((resolve, reject) => {
                    const request = store.put(item);
                    request.onsuccess = () => resolve();
                    request.onerror = () => {
                        console.warn(`‚ö†Ô∏è Failed to save item to ${storeName}:`, request.error);
                        resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    };
                });
            }));
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await this.waitForTransaction(transaction);
            
            processedItems += batch.length;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            const progress = Math.min(100, Math.round((processedItems / totalItems) * 100));
            if (progressCallback) {
                const stepNumber = this.getStepNumberForStore(storeName);
                // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: step, percent, message
                console.log(`üìä Progress callback: Step ${stepNumber}, Progress ${progress}%, Store: ${storeName}, Processed: ${processedItems}/${totalItems}`);
                progressCallback(stepNumber, progress, `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${processedItems} –∏–∑ ${totalItems} –∑–∞–ø–∏—Å–µ–π`);
            }
            
            // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–∞–∂–¥—ã–µ 2 –±–∞—Ç—á–∞
            if (i % (batchSize * 2) === 0) {
                await new Promise(resolve => setTimeout(resolve, 5));
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —à–∞–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    getStepNumberForStore(storeName) {
        const stepMap = {
            'categories': 3,
            'colors': 4,
            'parts': 5,
            'partColors': 6
        };
        return stepMap[storeName] || 3;
    }

    /**
     * –ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
     */
    async searchParts(query, limit = 50, options = {}) {
        if (!query || query.length < 2) return [];

        const transaction = this.db.transaction(['parts', 'categories'], 'readonly');
        const partsStore = transaction.objectStore('parts');
        const categoriesStore = transaction.objectStore('categories');
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        const categories = await this.getAllFromStore(categoriesStore);
        const categoryMap = new Map(categories.map(cat => [cat.id, cat.name]));
        
        const results = [];
        const searchQuery = query.toLowerCase();

        const request = partsStore.openCursor();
        
        return new Promise((resolve) => {
            request.onsuccess = (event) => {
                const cursor = event.target.result;
                
                if (cursor && results.length < limit) {
                    const part = cursor.value;
                    const categoryName = categoryMap.get(part.catId) || 'Unknown';
                    
                    const matchesBlId = part.blId.toLowerCase().includes(searchQuery);
                    const matchesPartId = part.partId && part.partId.toLowerCase().includes(searchQuery);
                    const matchesName = part.name.toLowerCase().includes(searchQuery);
                    const matchesCategory = categoryName.toLowerCase().includes(searchQuery);

                    if (matchesBlId || matchesPartId || matchesName || matchesCategory) {
                        results.push({
                            value: part.partId || part.blId,
                            label: `${part.blId} - ${part.name}`,
                            category: categoryName,
                            data: {
                                ...part,
                                categoryName
                            }
                        });
                    }
                    
                    cursor.continue();
                } else {
                    resolve(results);
                }
            };
        });
    }

    /**
     * –ü–æ–∏—Å–∫ —Ü–≤–µ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
     */
    async searchColors(query, limit = 20, options = {}) {
        const transaction = this.db.transaction(['colors'], 'readonly');
        const store = transaction.objectStore('colors');
        
        if (!query || query.length < 1) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞
            return this.getPopularColors(limit);
        }

        const results = [];
        const searchQuery = query.toLowerCase();
        const request = store.openCursor();

        return new Promise((resolve) => {
            request.onsuccess = (event) => {
                const cursor = event.target.result;
                
                if (cursor && results.length < limit) {
                    const color = cursor.value;
                    const matchesName = color.name.toLowerCase().includes(searchQuery);
                    const matchesId = String(color.id).includes(searchQuery);
                    const matchesType = color.type && color.type.toLowerCase().includes(searchQuery);

                    if (matchesName || matchesId || matchesType) {
                        results.push({
                            value: color.name,
                            label: color.name,
                            rgb: color.rgb,
                            type: color.type,
                            data: color
                        });
                    }
                    cursor.continue();
                } else {
                    resolve(results);
                }
            };
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞
     */
    async getPopularColors(limit = 20) {
        const transaction = this.db.transaction(['colors'], 'readonly');
        const store = transaction.objectStore('colors');
        const index = store.index('parts');
        
        const results = [];
        const request = index.openCursor(null, 'prev');

        return new Promise((resolve) => {
            request.onsuccess = (event) => {
                const cursor = event.target.result;
                
                if (cursor && results.length < limit) {
                    const color = cursor.value;
                    results.push({
                        value: color.name,
                        label: color.name,
                        rgb: color.rgb,
                        type: color.type,
                        data: color
                    });
                    cursor.continue();
                } else {
                    resolve(results);
                }
            };
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ store
     */
    async getAllFromStore(store) {
        return new Promise((resolve) => {
            const request = store.getAll();
            request.onsuccess = () => resolve(request.result || []);
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
     */
    async getCategoryById(categoryId) {
        const transaction = this.db.transaction(['categories'], 'readonly');
        const store = transaction.objectStore('categories');
        
        return new Promise((resolve) => {
            const request = store.get(categoryId);
            request.onsuccess = () => resolve(request.result);
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å –ø–æ ID
     */
    async getPartById(partId) {
        if (!this.db) return null;
        
        const transaction = this.db.transaction(['parts'], 'readonly');
        const store = transaction.objectStore('parts');
        
        return new Promise((resolve) => {
            const request = store.get(partId);
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => resolve(null);
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –ø–æ –∏–º–µ–Ω–∏
     */
    async getColorByName(colorName) {
        if (!this.db) return null;
        
        const transaction = this.db.transaction(['colors'], 'readonly');
        const store = transaction.objectStore('colors');
        const index = store.index('name');
        
        return new Promise((resolve) => {
            const request = index.get(colorName);
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => resolve(null);
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –ø–æ ID
     */
    async getColorById(colorId) {
        if (!this.db) return null;
        
        const transaction = this.db.transaction(['colors'], 'readonly');
        const store = transaction.objectStore('colors');
        
        return new Promise((resolve) => {
            const request = store.get(parseInt(colorId));
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => resolve(null);
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∏ –¥–µ—Ç–∞–ª—å-—Ü–≤–µ—Ç
     */
    async getPartColors(partId) {
        if (!this.db.objectStoreNames.contains('partColors')) {
            return [];
        }

        const transaction = this.db.transaction(['partColors'], 'readonly');
        const store = transaction.objectStore('partColors');
        const index = store.index('partId');
        
        return new Promise((resolve) => {
            const request = index.getAll(partId);
            request.onsuccess = () => resolve(request.result || []);
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    async getStats() {
        const [partsCount, colorsCount, categoriesCount, partColorsCount] = await Promise.all([
            this.getStoreCount('parts'),
            this.getStoreCount('colors'),
            this.getStoreCount('categories'),
            this.db.objectStoreNames.contains('partColors') ? this.getStoreCount('partColors') : 0
        ]);
        
        const lastUpdate = await this.getMetadata('lastUpdate');
        const lcxMetadata = await this.getMetadata('lcxMetadata');
        
        return {
            parts: partsCount,
            colors: colorsCount,
            categories: categoriesCount,
            partColors: partColorsCount,
            lastUpdate,
            lcxMetadata,
            source: lcxMetadata?.source || 'unknown',
            version: lcxMetadata?.version || 'unknown'
        };
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    async loadData(progressCallback = null) {
        if (this.isLoaded) return;

        try {
            await this.init();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ LCX –¥–∞–Ω–Ω—ã–µ
            const lcxMetadata = await this.getMetadata('lcxMetadata');
            const hasData = await this.hasExistingData();
            
            if (lcxMetadata && hasData) {
                console.log('‚úÖ LCX data found in IndexedDB, skipping download');
                this.isLoaded = true;
                const stats = await this.getStats();
                console.log(`üìä Loaded from IndexedDB: ${stats.parts} parts, ${stats.colors} colors, ${stats.categories} categories`);
                return stats;
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –æ—á–∏—â–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if (lcxMetadata && !hasData) {
                console.log('üßπ Clearing outdated metadata...');
                await this.setMetadata('lcxMetadata', null);
                console.log('‚ö†Ô∏è LCX metadata found but no actual data, will reload');
            } else {
                console.log('üì• No LCX data found, will load LCX file...');
            }

            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            console.log('üßπ Clearing existing data before loading...');
            await Promise.all([
                this.clearStore('categories'),
                this.clearStore('colors'), 
                this.clearStore('parts'),
                this.clearStore('partColors')
            ]);

            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å LCX —Ñ–∞–π–ª
            try {
                console.log('üîÑ Loading LCX data from file...');
                await this.loadFromLCXFile(progressCallback);
                this.isLoaded = true;
                
                const stats = await this.getStats();
                console.log(`üìä Loaded from LCX file: ${stats.parts} parts, ${stats.colors} colors, ${stats.categories} categories`);
                return stats;
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to load LCX file, falling back to CSV:', error);
                // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É CSV –º–µ—Ç–æ–¥—É
                if (progressCallback) progressCallback(0, 50, 'Fallback –∫ CSV –∑–∞–≥—Ä—É–∑–∫–µ...');
                await this.loadFromCSV();
            }
            this.isLoaded = true;
            
            const stats = await this.getStats();
            console.log(`üìä Loaded from CSV: ${stats.parts} parts, ${stats.colors} colors`);
            return stats;
        } catch (error) {
            console.error('‚ùå Failed to load data:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É LCX —Ñ–∞–π–ª–∞
     */
    static canHandleLCX(file) {
        return LCXParser.canParse(file);
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç LCX –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
     */
    async loadFromLCXData(lcxData, progressCallback = null) {
        console.log('üîÑ Loading data from LCX object to IndexedDB...');
        
        try {
            // –®–∞–≥ 4: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if (progressCallback) progressCallback(4, 0, '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
            console.log('üìä Transforming data...');
            const transformedData = await this.lcxParser.transform(lcxData, progressCallback);
            
            // –®–∞–≥–∏ 5-8: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ saveLCXData)
            console.log('üìä Saving data to IndexedDB...');
            await this.saveLCXData(transformedData, progressCallback);
            
            // –®–∞–≥ 8: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if (progressCallback) progressCallback(8, 50, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...');
            await this.setMetadata('lcxMetadata', {
                schemaVersion: lcxData.schemaVersion,
                source: lcxData.source,
                version: lcxData.version,
                lastUpdate: new Date().toISOString()
            });
            
            if (progressCallback) progressCallback(8, 100, '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            console.log('‚úÖ LCX data loaded successfully');
        } catch (error) {
            console.error('‚ùå Failed to load LCX data:', error);
            if (progressCallback) progressCallback(-1, 0, `–û—à–∏–±–∫–∞: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç LCX –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
     */
    async loadFromLCXFile(progressCallback = null) {
        try {
            console.log('üìÅ Loading LCX file: data/bricklink-catalog.lcx.json.gz');
            
            // –®–∞–≥ 1: –ß–∞–Ω–∫–æ–≤–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
            if (progressCallback) progressCallback(1, 5, '–ß—Ç–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞...');
            const response = await fetch('data/bricklink-catalog.lcx.json.gz');
            if (!response.ok) {
                throw new Error(`Failed to fetch LCX file: ${response.status}`);
            }
            
            if (progressCallback) progressCallback(1, 10, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∞—Ä—Ö–∏–≤–∞...');
            const contentLength = response.headers.get('content-length');
            const totalSize = contentLength ? parseInt(contentLength) : 0;
            
            if (progressCallback) progressCallback(1, 15, `–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: ${Math.round(totalSize / 1024)} KB`);
            
            // –ß–∞–Ω–∫–æ–≤–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            const compressedData = await this.downloadInChunks(response, progressCallback);
            if (progressCallback) progressCallback(1, 100, '–ê—Ä—Ö–∏–≤ –ø—Ä–æ—á–∏—Ç–∞–Ω');
            
            // –®–∞–≥ 2: –ß–∞–Ω–∫–æ–≤–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
            if (progressCallback) progressCallback(2, 5, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏...');
            const decompressedData = await this.decompressGzipWithProgress(compressedData, progressCallback);
            if (progressCallback) progressCallback(2, 100, '–ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω');
            
            // –®–∞–≥ 3: –ü–∞—Ä—Å–∏–Ω–≥ JSON –¥–∞–Ω–Ω—ã—Ö
            if (progressCallback) progressCallback(3, 20, '–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON...');
            const lcxData = JSON.parse(decompressedData);
            if (progressCallback) progressCallback(3, 50, 'JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω');
            if (progressCallback) progressCallback(3, 80, '–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
            if (progressCallback) progressCallback(3, 100, '–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ IndexedDB (—à–∞–≥–∏ 4-8)
            await this.loadFromLCXData(lcxData, progressCallback);
            
            console.log('‚úÖ LCX file loaded successfully');
        } catch (error) {
            console.error('‚ùå Failed to load LCX file:', error);
            throw error;
        }
    }

    /**
     * –ß–∞–Ω–∫–æ–≤–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
     */
    async downloadInChunks(response, progressCallback = null) {
        const reader = response.body.getReader();
        const chunks = [];
        let receivedLength = 0;
        const contentLength = response.headers.get('content-length');
        const totalSize = contentLength ? parseInt(contentLength) : 0;
        
        let progressStep = 20; // –ù–∞—á–∏–Ω–∞–µ–º —Å 20% –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        const progressIncrement = 5; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5%
        
        try {
            while (true) {
                const { done, value } = await reader.read();
                
                if (done) break;
                
                chunks.push(value);
                receivedLength += value.length;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5%
                if (totalSize > 0) {
                    const currentProgress = Math.floor((receivedLength / totalSize) * 75) + 20; // 20-95%
                    if (currentProgress >= progressStep) {
                        if (progressCallback) {
                            progressCallback(1, currentProgress, 
                                `–ü—Ä–æ—á–∏—Ç–∞–Ω–æ: ${Math.round(receivedLength / 1024)} KB / ${Math.round(totalSize / 1024)} KB`);
                        }
                        progressStep += progressIncrement;
                    }
                } else {
                    // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 50KB
                    if (receivedLength % (50 * 1024) < value.length) {
                        if (progressCallback) {
                            progressCallback(1, Math.min(95, 20 + (receivedLength / 1024) * 0.1), 
                                `–ü—Ä–æ—á–∏—Ç–∞–Ω–æ: ${Math.round(receivedLength / 1024)} KB`);
                        }
                    }
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                await new Promise(resolve => setTimeout(resolve, 10));
            }
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
            const result = new Uint8Array(receivedLength);
            let position = 0;
            for (const chunk of chunks) {
                result.set(chunk, position);
                position += chunk.length;
            }
            
            return result;
        } finally {
            reader.releaseLock();
        }
    }

    /**
     * –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç gzip –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
     */
    async decompressGzipWithProgress(compressedData, progressCallback = null) {
        const stream = new DecompressionStream('gzip');
        const writer = stream.writable.getWriter();
        const reader = stream.readable.getReader();
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        writer.write(compressedData);
        writer.close();
        
        // –ß–∏—Ç–∞–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        const chunks = [];
        let done = false;
        let totalDecompressed = 0;
        let progressStep = 10;
        const progressIncrement = 5;
        
        while (!done) {
            const { value, done: readerDone } = await reader.read();
            done = readerDone;
            
            if (value) {
                chunks.push(value);
                totalDecompressed += value.length;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5%
                const currentProgress = Math.min(95, 10 + (totalDecompressed / 1024) * 0.1);
                if (currentProgress >= progressStep) {
                    if (progressCallback) {
                        progressCallback(2, currentProgress, 
                            `–†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ: ${Math.round(totalDecompressed / 1024)} KB`);
                    }
                    progressStep += progressIncrement;
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                await new Promise(resolve => setTimeout(resolve, 5));
            }
        }
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞–Ω–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
        const totalLength = chunks.reduce((acc, chunk) => acc + chunk.length, 0);
        const result = new Uint8Array(totalLength);
        let offset = 0;
        
        for (const chunk of chunks) {
            result.set(chunk, offset);
            offset += chunk.length;
        }
        
        return new TextDecoder().decode(result);
    }

    /**
     * –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç gzip –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    async decompressGzip(compressedData) {
        const stream = new DecompressionStream('gzip');
        const writer = stream.writable.getWriter();
        const reader = stream.readable.getReader();
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        writer.write(compressedData);
        writer.close();
        
        // –ß–∏—Ç–∞–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const chunks = [];
        let done = false;
        
        while (!done) {
            const { value, done: readerDone } = await reader.read();
            done = readerDone;
            if (value) {
                chunks.push(value);
            }
        }
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞–Ω–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
        const totalLength = chunks.reduce((acc, chunk) => acc + chunk.length, 0);
        const result = new Uint8Array(totalLength);
        let offset = 0;
        
        for (const chunk of chunks) {
            result.set(chunk, offset);
            offset += chunk.length;
        }
        
        return new TextDecoder().decode(result);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
     */
    async hasExistingData() {
        if (!this.db) {
            return false;
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            const [partsCount, colorsCount, categoriesCount] = await Promise.all([
                this.getStoreCount('parts'),
                this.getStoreCount('colors'),
                this.getStoreCount('categories')
            ]);
            
            // –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏ –∏ —Ü–≤–µ—Ç–∞
            const hasData = partsCount > 0 && colorsCount > 0;
            
            if (hasData) {
                console.log(`üìä Found existing data: ${partsCount} parts, ${colorsCount} colors, ${categoriesCount} categories`);
            }
            
            return hasData;
        } catch (error) {
            console.warn('‚ö†Ô∏è Error checking existing data:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º store
     */
    async getStoreCount(storeName) {
        if (!this.db) {
            return 0;
        }
        
        const transaction = this.db.transaction([storeName], 'readonly');
        const store = transaction.objectStore(storeName);
        
        return new Promise((resolve) => {
            const request = store.count();
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => resolve(0);
        });
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async clearStore(storeName) {
        const transaction = this.db.transaction([storeName], 'readwrite');
        const store = transaction.objectStore(storeName);
        await new Promise((resolve) => {
            const request = store.clear();
            request.onsuccess = () => resolve();
        });
    }

    async waitForTransaction(transaction) {
        return new Promise((resolve, reject) => {
            transaction.oncomplete = () => resolve();
            transaction.onerror = () => reject(transaction.error);
        });
    }

    async setMetadata(key, value) {
        const transaction = this.db.transaction(['metadata'], 'readwrite');
        const store = transaction.objectStore('metadata');
        store.put({ key, ...value });
        return this.waitForTransaction(transaction);
    }

    async getMetadata(key) {
        const transaction = this.db.transaction(['metadata'], 'readonly');
        const store = transaction.objectStore('metadata');
        
        return new Promise((resolve) => {
            const request = store.get(key);
            request.onsuccess = () => resolve(request.result);
        });
    }

    // –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API
    async loadFromCSV() {
        console.log('üì¶ CSV loading not supported in LCX adapter, use loadFromLCX instead');
        return;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.LCXIndexedDBAdapter = LCXIndexedDBAdapter;
