/**
 * BrickLink Data Management
 * –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª–µ–π –∏ —Ü–≤–µ—Ç–æ–≤ –∏–∑ BrickLink
 */

class BrickLinkData {
    constructor() {
        this.parts = [];
        this.colors = [];
        this.isLoaded = false;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–µ–π –∏ —Ü–≤–µ—Ç–æ–≤
     */
    async loadData() {
        if (this.isLoaded) return;

        try {
            await Promise.all([
                this.loadParts(),
                this.loadColors()
            ]);
            this.isLoaded = true;
            console.log(`‚úÖ BrickLink data loaded: ${this.parts.length} parts, ${this.colors.length} colors`);
        } catch (error) {
            console.error('‚ùå Failed to load BrickLink data:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–µ–π –∏–∑ CSV
     */
    async loadParts() {
        const response = await fetch('/data/bricklink/parts.csv');
        const text = await response.text();
        
        const lines = text.split('\n');
        const headers = lines[0].split('\t');
        
        this.parts = [];
        
        for (let i = 3; i < lines.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            const line = lines[i].trim();
            if (!line) continue;
            
            const values = line.split('\t');
            if (values.length < 4) continue;
            
            const part = {
                categoryId: values[0] || '',
                categoryName: values[1] || '',
                partId: values[2] || '',
                name: values[3] || '',
                alternateId: values[4] || ''
            };
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã –∏ homemaker –¥–µ—Ç–∞–ª–∏
            if (part.categoryName === 'Sticker Sheet' || part.categoryName === 'Homemaker') {
                continue;
            }
            
            if (part.partId && part.name) {
                this.parts.push(part);
            }
        }
        
        console.log(`üì¶ Loaded ${this.parts.length} parts`);
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤ –∏–∑ CSV
     */
    async loadColors() {
        const response = await fetch('/data/bricklink/colors.csv');
        const text = await response.text();
        
        const lines = text.split('\n');
        
        this.colors = [];
        
        for (let i = 3; i < lines.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            const line = lines[i].trim();
            if (!line) continue;
            
            const values = line.split('\t');
            if (values.length < 4) continue;
            
            const color = {
                id: values[0] || '',
                name: values[1] || '',
                rgb: values[2] || '',
                type: values[3] || '',
                parts: parseInt(values[4]) || 0
            };
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
            if (color.name === '(Not Applicable)' || !color.name || !color.rgb) {
                continue;
            }
            
            this.colors.push(color);
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ—Ç–∞–ª–µ–π)
        this.colors.sort((a, b) => b.parts - a.parts);
        
        console.log(`üé® Loaded ${this.colors.length} colors`);
    }

    /**
     * –ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
     */
    searchParts(query) {
        if (!query || query.length < 2) return [];
        
        const searchQuery = query.toLowerCase();
        
        return this.parts
            .filter(part => 
                part.partId.toLowerCase().includes(searchQuery) ||
                part.name.toLowerCase().includes(searchQuery) ||
                part.categoryName.toLowerCase().includes(searchQuery)
            )
            .slice(0, 50) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            .map(part => ({
                value: part.partId,
                label: `${part.partId} - ${part.name}`,
                category: part.categoryName,
                data: part
            }));
    }

    /**
     * –ü–æ–∏—Å–∫ —Ü–≤–µ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
     */
    searchColors(query) {
        if (!query || query.length < 1) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-20 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
            return this.colors
                .slice(0, 20)
                .map(color => ({
                    value: color.name,
                    label: color.name,
                    rgb: color.rgb,
                    data: color
                }));
        }
        
        const searchQuery = query.toLowerCase();
        
        return this.colors
            .filter(color => 
                color.name.toLowerCase().includes(searchQuery) ||
                color.id.includes(searchQuery)
            )
            .slice(0, 20)
            .map(color => ({
                value: color.name,
                label: color.name,
                rgb: color.rgb,
                data: color
            }));
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å –ø–æ ID
     */
    getPartById(partId) {
        return this.parts.find(part => part.partId === partId);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –ø–æ –∏–º–µ–Ω–∏
     */
    getColorByName(colorName) {
        return this.colors.find(color => color.name === colorName);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–µ—Ç–∞–ª–µ–π
     */
    getCategories() {
        const categories = [...new Set(this.parts.map(part => part.categoryName))]
            .filter(cat => cat)
            .sort();
        return categories;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞ (—Ç–æ–ø-10)
     */
    getPopularColors() {
        return this.colors.slice(0, 10);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
window.brickLinkData = new BrickLinkData();
