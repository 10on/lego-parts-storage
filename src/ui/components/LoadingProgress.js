/**
 * LoadingProgress Component
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ —ç—Ç–∞–ø–∞–º
 */

class LoadingProgress {
    constructor() {
        this.isVisible = false;
        this.currentStep = 0;
        this.totalSteps = 0;
        this.stepDetails = [];
        this.onCancel = null;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
     */
    show(steps, options = {}) {
        this.stepDetails = steps;
        this.totalSteps = steps.length;
        this.currentStep = 0;
        this.onCancel = options.onCancel || null;
        
        this.createProgressModal();
        this.isVisible = true;
        
        console.log('üîÑ Loading progress started:', steps.map(s => s.title));
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º this –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
        return this;
    }

    /**
     * –°–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hide() {
        const modal = document.getElementById('loading-progress-modal');
        if (modal) {
            modal.classList.remove('show');
            modal.classList.add('hide');
            setTimeout(() => {
                if (modal.parentNode) {
                    modal.remove();
                }
            }, 300);
        }
        this.isVisible = false;
        console.log('‚úÖ Loading progress completed');
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
     */
    updateStep(stepIndex, progress, details = '') {
        if (!this.isVisible) return;

        this.currentStep = stepIndex;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        console.log(`üîÑ Progress update: Step ${stepIndex}, Progress ${progress}%, Details: ${details}`);
        
        // –ü–ª–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        this.renderCurrentStep(stepIndex, progress, details);
    }

    /**
     * –†–µ–Ω–¥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
     */
    renderCurrentStep(stepIndex, progress, details = '') {
        const container = document.getElementById('current-step-container');
        if (!container) return;

        const step = this.stepDetails[stepIndex];
        if (!step) return;

        const isCompleted = progress >= 100;
        const stepClass = isCompleted ? 'completed' : 'active';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const existingStep = container.querySelector('.progress-step');
        const existingProgressBar = container.querySelector('.progress-bar');
        const shouldAnimate = existingProgressBar && progress > 0;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–≥, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (!existingStep || existingStep.dataset.stepIndex !== stepIndex.toString()) {
            container.innerHTML = `
                <div class="progress-step ${stepClass}" data-step-index="${stepIndex}">
                    <div class="step-header">
                        <div class="step-number">${stepIndex + 1}</div>
                        <div class="step-info">
                            <div class="step-title">${step.title}</div>
                            <div class="step-description">${step.description}</div>
                        </div>
                    </div>
                    <div class="step-progress">
                        <div class="progress-bar-container">
                            <div class="progress-bar-bg">
                                <div class="progress-bar" style="width: ${Math.min(100, Math.max(0, progress))}%"></div>
                            </div>
                        </div>
                        <div class="progress-details">${details || '–û–∂–∏–¥–∞–Ω–∏–µ...'}</div>
                    </div>
                </div>
            `;
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
            const stepElement = container.querySelector('.progress-step');
            const progressBar = container.querySelector('.progress-bar');
            const progressDetails = container.querySelector('.progress-details');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å —à–∞–≥–∞
            stepElement.className = `progress-step ${stepClass}`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            if (progressBar) {
                progressBar.style.width = `${Math.min(100, Math.max(0, progress))}%`;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
            if (progressDetails) {
                progressDetails.textContent = details || '–û–∂–∏–¥–∞–Ω–∏–µ...';
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        if (shouldAnimate) {
            const progressBar = container.querySelector('.progress-bar');
            if (progressBar) {
                progressBar.style.transition = 'width 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
            }
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
     */
    completeStep(stepIndex, details = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ') {
        this.updateStep(stepIndex, 100, details);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        if (stepIndex < this.totalSteps - 1) {
            setTimeout(() => {
                this.updateStep(stepIndex + 1, 0, '–ù–∞—á–∏–Ω–∞–µ–º...');
            }, 500);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —à–∞–≥–µ
     */
    showError(stepIndex, errorMessage) {
        this.renderCurrentStep(stepIndex, 0, `‚ùå ${errorMessage}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—à–∏–±–∫–∏
        const container = document.getElementById('current-step-container');
        if (container) {
            const stepElement = container.querySelector('.progress-step');
            if (stepElement) {
                stepElement.className = 'progress-step error';
            }
        }
    }


    /**
     * –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    createProgressModal() {
        const existingModal = document.getElementById('loading-progress-modal');
        if (existingModal) {
            existingModal.remove();
        }

        const modal = document.createElement('div');
        modal.id = 'loading-progress-modal';
        modal.className = 'loading-progress-modal';
        modal.innerHTML = this.renderProgressModal();

        document.body.appendChild(modal);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        const cancelBtn = document.getElementById('loading-cancel-btn');
        if (cancelBtn && this.onCancel) {
            cancelBtn.addEventListener('click', () => {
                if (this.onCancel) {
                    this.onCancel();
                }
                this.hide();
            });
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        requestAnimationFrame(() => {
            modal.classList.add('show');
        });
    }

    /**
     * –†–µ–Ω–¥–µ—Ä HTML –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    renderProgressModal() {
        const hasCancel = this.onCancel !== null;
        
        return `
            <div class="loading-progress-content">
                <div class="loading-header">
                    <h3>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
                    <div class="loading-spinner"></div>
                </div>

                <div class="steps-container">
                    <div id="current-step-container">
                        <!-- –¢–µ–∫—É—â–∏–π —à–∞–≥ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å -->
                    </div>
                </div>

                ${hasCancel ? `
                    <div class="loading-actions">
                        <button id="loading-cancel-btn" class="btn btn-outline">–û—Ç–º–µ–Ω–∏—Ç—å</button>
                    </div>
                ` : ''}
            </div>
        `;
    }

    /**
     * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LCX
     */
    static createLCXProgress() {
        const steps = [
            {
                title: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                description: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ IndexedDB –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü'
            },
            {
                title: '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö',
                description: '–ó–∞–≥—Ä—É–∑–∫–∞ LCX —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ BrickLink'
            },
            {
                title: '–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞',
                description: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞'
            },
            {
                title: '–ü–∞—Ä—Å–∏–Ω–≥ JSON –¥–∞–Ω–Ω—ã—Ö',
                description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö'
            },
            {
                title: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                description: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–µ—Ç–∞–ª–µ–π –≤ –±–∞–∑—É'
            },
            {
                title: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ü–≤–µ—Ç–æ–≤',
                description: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–≤–µ—Ç–∞—Ö –≤ –±–∞–∑—É'
            },
            {
                title: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π',
                description: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–µ—Ç–∞–ª–µ–π –≤ –±–∞–∑—É'
            },
            {
                title: '–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤',
                description: '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞'
            },
            {
                title: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ',
                description: '–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
            }
        ];

        return new LoadingProgress().show(steps, {
            onCancel: () => {
                console.log('‚ùå Loading cancelled by user');
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏
            }
        });
    }

    /**
     * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    static createAppInitProgress() {
        const steps = [
            {
                title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞',
                description: '–ü–æ–∏—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞'
            },
            {
                title: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB',
                description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            },
            {
                title: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–µ—Ç–∞–ª–µ–π',
                description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã'
            },
            {
                title: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
                description: '–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
            }
        ];

        return new LoadingProgress().show(steps);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.LoadingProgress = LoadingProgress;
