// –í–∏–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ - —Å–µ—Ç–∫–∞ —Å —è—á–µ–π–∫–∞–º–∏
class ContainerView {
    constructor() {
        this.container = null;
        this.isEditing = false;
        this.selectedCells = new Set();
    }

    setContainer(container) {
        console.log('Setting container:', container);
        this.container = container;
        this.render();
    }

    render() {
        console.log('Rendering container view:', this.container);
        if (!this.container) {
            console.error('No container to render!');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const title = document.getElementById('container-title');
        if (title) {
            title.textContent = this.container.name;
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–µ—Ç–∫—É
        this.renderGrid();
        this.setupEventListeners();
    }

    renderGrid() {
        const grid = document.getElementById('container-grid');
        if (!grid || !this.container) return;

        const { rows, cols, cells } = this.container;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
        grid.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
        grid.style.gridTemplateRows = `repeat(${rows}, 1fr)`;

        // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
        grid.innerHTML = '';

        // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏
        for (let i = 0; i < rows * cols; i++) {
            const cell = this.createCell(i, cells[i]);
            grid.appendChild(cell);
        }
    }

    createCell(index, cellData) {
        const cell = document.createElement('div');
        cell.className = 'grid-cell';
        cell.dataset.cellIndex = index;
        
        if (cellData) {
            cell.innerHTML = this.renderCellContent(cellData);
            cell.classList.add('filled');
        } else {
            cell.classList.add('empty');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä—è–º–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —è—á–µ–π–∫–∏
        cell.addEventListener('click', (e) => {
            console.log('Cell click event triggered!', index);
            this.handleCellClick(e, cell);
        });

        cell.addEventListener('dblclick', (e) => {
            console.log('Cell double-click event triggered!', index);
            this.handleCellDoubleClick(e, cell);
        });

        return cell;
    }

    renderCellContent(cellData) {
        return `
            <div class="cell-content">
                ${cellData.image ? `<img src="${cellData.image}" alt="${cellData.name}" class="cell-image" onerror="this.style.display='none'">` : ''}
                <div class="cell-part-id">${cellData.partId}</div>
                <div class="cell-quantity">${cellData.quantity}</div>
                <div class="cell-color">${cellData.color}</div>
            </div>
        `;
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —è—á–µ–µ–∫ —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ createCell()
        // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
        const editModeBtn = document.getElementById('edit-mode-btn');
        if (editModeBtn) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            editModeBtn.replaceWith(editModeBtn.cloneNode(true));
            const newEditModeBtn = document.getElementById('edit-mode-btn');
            newEditModeBtn.addEventListener('click', () => {
                this.toggleEditMode();
            });
        }

        const saveBtn = document.getElementById('save-container-btn');
        if (saveBtn) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            saveBtn.replaceWith(saveBtn.cloneNode(true));
            const newSaveBtn = document.getElementById('save-container-btn');
            newSaveBtn.addEventListener('click', () => {
                this.saveContainer();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        const backBtn = document.getElementById('back-to-home');
        if (backBtn) {
            backBtn.replaceWith(backBtn.cloneNode(true));
            const newBackBtn = document.getElementById('back-to-home');
            newBackBtn.addEventListener('click', () => {
                if (window.app) {
                    window.app.showView('home');
                }
            });
        }
    }

    handleCellClick(e, cell) {
        console.log('Cell clicked!', cell, this.isEditing);
        if (this.isEditing) {
            this.toggleCellSelection(cell);
        } else {
            this.openCellEditor(cell);
        }
    }

    handleCellDoubleClick(e, cell) {
        this.openCellEditor(cell);
    }

    toggleCellSelection(cell) {
        if (this.selectedCells.has(cell)) {
            this.selectedCells.delete(cell);
            cell.classList.remove('selected');
        } else {
            this.selectedCells.add(cell);
            cell.classList.add('selected');
        }
    }

    openCellEditor(cell) {
        console.log('Opening cell editor for cell:', cell);
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
        this.closeCellEditor();

        const cellIndex = parseInt(cell.dataset.cellIndex);
        const cellData = this.container.cells[cellIndex];
        
        console.log('Cell index:', cellIndex, 'Cell data:', cellData);

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'cell-editor-modal';
        modal.id = 'cell-editor-modal';

        const editor = document.createElement('div');
        editor.className = 'cell-editor';
        
        try {
            editor.innerHTML = this.renderCellEditor(cellData, cellIndex);
            console.log('Editor HTML created successfully');
        } catch (error) {
            console.error('Error creating editor HTML:', error);
            return;
        }
        
        modal.appendChild(editor);
        document.body.appendChild(modal);
        cell.classList.add('editing');
        
        console.log('Modal editor created and added to body');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        this.setupCellEditorListeners(editor, cell, cellIndex);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeCellEditor();
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeCellEditor();
            }
        }, { once: true });
        
        console.log('Cell editor modal should be visible now!');
    }

    renderCellEditor(cellData, cellIndex) {
        const html = `
            <div class="cell-editor-header">
                <div class="header-left">
                    <h4>${cellData ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å'}</h4>
                    <span class="cell-position">–Ø—á–µ–π–∫–∞ ${cellIndex + 1}</span>
                </div>
                <button type="button" class="close-btn" id="modal-close">‚úï</button>
            </div>
            <div class="cell-editor-content">
                <form class="cell-editor-form">
                    <div class="form-group">
                        <label class="form-label">–î–µ—Ç–∞–ª—å *</label>
                        <input type="text" class="form-input autocomplete-input" id="cell-part" value="${this.formatPartValue(cellData)}" placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏..." required>
                        <small class="form-help">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ BrickLink</small>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">–¶–≤–µ—Ç *</label>
                            <input type="text" class="form-input autocomplete-input" id="cell-color" value="${cellData?.color || ''}" placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ü–≤–µ—Ç..." required>
                            <small class="form-help">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ BrickLink</small>
                        </div>
                        <div class="form-group">
                            <label class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                            <input type="number" class="form-input" id="cell-quantity" value="${cellData?.quantity || 1}" min="1" max="999">
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary">
                            <span>${cellData ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å'}</span>
                        </button>
                        <button type="button" class="btn btn-secondary" id="cell-cancel">–û—Ç–º–µ–Ω–∞</button>
                        ${cellData ? '<button type="button" class="btn btn-danger" id="cell-clear">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>' : ''}
                    </div>
                </form>
                <div class="part-image-container">
                    <div class="part-image-wrapper">
                        <img id="part-image" src="" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏" class="part-image" style="display: none;">
                        <div id="part-image-placeholder" class="part-image-placeholder">
                            <div class="placeholder-icon">üñºÔ∏è</div>
                            <div class="placeholder-text">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∏ —Ü–≤–µ—Ç</div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        console.log('Generated HTML contains part-image-container:', html.includes('part-image-container'));
        return html;
    }

    formatPartValue(cellData) {
        if (!cellData || !cellData.partId) return '';
        if (cellData.name) {
            return `${cellData.partId} - ${cellData.name}`;
        }
        return cellData.partId;
    }

    setupCellEditorListeners(editor, cell, cellIndex) {
        const form = editor.querySelector('.cell-editor-form');
        const cancelBtn = editor.querySelector('#cell-cancel');
        const clearBtn = editor.querySelector('#cell-clear');
        const closeBtn = editor.querySelector('#modal-close');

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveCellData(cell, cellIndex, editor);
        });

        cancelBtn.addEventListener('click', () => {
            this.clearValidationErrors();
            this.closeCellEditor();
        });

        closeBtn.addEventListener('click', () => {
            this.closeCellEditor();
        });

        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                this.clearCellData(cell, cellIndex);
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const updateImage = this.setupImageUpdate(editor);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —è—á–µ–π–∫–∏
        if (cellData && cellData.partId && cellData.color) {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
            setTimeout(() => {
                updateImage();
            }, 100);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        this.setupPartAutocomplete(editor, updateImage);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
        this.setupColorAutocomplete(editor, updateImage);
    }

    setupPartAutocomplete(editor, updateImage) {
        const partInput = editor.querySelector('#cell-part');

        if (!partInput || !window.brickLinkData || !window.brickLinkData.isLoaded) {
            console.warn('BrickLink data not loaded, using simple input');
            return;
        }

        const partAutocomplete = new AutoComplete(partInput, {
            minChars: 2,
            delay: 200,
            placeholder: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏...',
            noResultsText: '–î–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
            showCategories: true,
            source: async (query) => {
                return window.brickLinkData.searchParts(query);
            },
            onSelect: async (value, item) => {
                try {
                    // value —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç partId, –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    const partData = await window.brickLinkData.getPartById(value);
                    if (partData) {
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "ID - –ù–∞–∑–≤–∞–Ω–∏–µ"
                        partInput.value = `${partData.partId} - ${partData.name}`;
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ID
                        partInput.value = value;
                    }
                } catch (error) {
                    console.warn('Failed to get part data:', error);
                    partInput.value = value;
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–µ—Ç–∞–ª–∏
                if (updateImage) updateImage();
            }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        this.partAutocomplete = partAutocomplete;
    }

    setupColorAutocomplete(editor, updateImage) {
        const colorInput = editor.querySelector('#cell-color');

        if (!colorInput || !window.brickLinkData || !window.brickLinkData.isLoaded) {
            console.warn('BrickLink data not loaded, using simple input');
            return;
        }

        const colorAutocomplete = new AutoComplete(colorInput, {
            minChars: 0, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å—Ä–∞–∑—É
            delay: 100,
            placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç...',
            noResultsText: '–¶–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
            source: async (query) => {
                return window.brickLinkData.searchColors(query);
            },
            onSelect: (value, item) => {
                colorInput.value = value;
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞
                updateImage();
            }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        this.colorAutocomplete = colorAutocomplete;
    }

    async saveCellData(cell, cellIndex, editor) {
        const partValue = editor.querySelector('#cell-part').value.trim();
        const quantity = parseInt(editor.querySelector('#cell-quantity').value) || 1;
        const color = editor.querySelector('#cell-color').value.trim();

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!partValue) {
            this.showValidationError(editor.querySelector('#cell-part'), '–î–µ—Ç–∞–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
            return;
        }

        if (!color) {
            this.showValidationError(editor.querySelector('#cell-color'), '–¶–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
            return;
        }

        if (quantity < 1 || quantity > 999) {
            this.showValidationError(editor.querySelector('#cell-quantity'), '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 999');
            return;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º partId –∏ name –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        let partId, name;
        if (partValue.includes(' - ')) {
            [partId, name] = partValue.split(' - ', 2);
        } else {
            partId = partValue;
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
            try {
                const partData = await window.brickLinkData?.getPartById(partId);
                name = partData?.name || partId;
            } catch {
                name = partId;
            }
        }

        const cellData = {
            id: `cell-${cellIndex}`,
            partId: partId.toUpperCase(),
            name,
            quantity,
            color: color || 'Unknown',
            colorId: this.getColorId(color),
            image: this.generateImageUrl(partId, color),
            lastUpdated: new Date().toISOString()
        };

        this.container.cells[cellIndex] = cellData;
        this.container.updatedAt = new Date().toISOString();

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —è—á–µ–π–∫–∏
        cell.innerHTML = this.renderCellContent(cellData);
        cell.classList.remove('empty', 'editing');
        cell.classList.add('filled');

        this.closeCellEditor();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (window.app) {
            await window.app.autoSave();
            window.app.showNotification(`–î–µ—Ç–∞–ª—å "${name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, 'success');
        }
    }

    showValidationError(input, message) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        this.clearValidationErrors();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –æ—à–∏–±–∫–∏
        input.classList.add('error');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const errorDiv = document.createElement('div');
        errorDiv.className = 'validation-error';
        errorDiv.textContent = message;
        input.parentNode.appendChild(errorDiv);
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π
        input.focus();
        input.select();
    }

    clearValidationErrors() {
        const editor = document.querySelector('.cell-editor');
        if (editor) {
            editor.querySelectorAll('.error').forEach(el => el.classList.remove('error'));
            editor.querySelectorAll('.validation-error').forEach(el => el.remove());
        }
    }

    generateImageUrl(partId, color) {
        // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è BrickLink
        const colorCode = this.getColorId(color) || '1';
        return `https://img.bricklink.com/ItemImage/PN/${colorCode}/${partId}.png`;
    }

    async clearCellData(cell, cellIndex) {
        this.container.cells[cellIndex] = null;
        this.container.updatedAt = new Date().toISOString();

        cell.innerHTML = '';
        cell.classList.remove('filled');
        cell.classList.add('empty');

        this.closeCellEditor();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (window.app) {
            await window.app.autoSave();
            window.app.showNotification('–Ø—á–µ–π–∫–∞ –æ—á–∏—â–µ–Ω–∞!', 'success');
        }
    }

    closeCellEditor() {
        // –û—á–∏—â–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç—ã
        if (this.partAutocomplete) {
            this.partAutocomplete.destroy();
            this.partAutocomplete = null;
        }
        
        if (this.colorAutocomplete) {
            this.colorAutocomplete.destroy();
            this.colorAutocomplete = null;
        }

        const modal = document.getElementById('cell-editor-modal');
        if (modal) {
            modal.remove();
        }
        
        document.querySelectorAll('.grid-cell.editing').forEach(cell => {
            cell.classList.remove('editing');
        });
    }

    toggleEditMode() {
        this.isEditing = !this.isEditing;
        const editBtn = document.getElementById('edit-mode-btn');
        
        if (this.isEditing) {
            editBtn.textContent = '–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';
            editBtn.classList.add('active');
            document.querySelectorAll('.grid-cell').forEach(cell => {
                cell.classList.add('editable');
            });
        } else {
            editBtn.textContent = '–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';
            editBtn.classList.remove('active');
            document.querySelectorAll('.grid-cell').forEach(cell => {
                cell.classList.remove('editable', 'selected');
            });
            this.selectedCells.clear();
        }
    }

    async saveContainer() {
        if (window.app) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const containerIndex = window.app.containers.findIndex(c => c.id === this.container.id);
            if (containerIndex > -1) {
                this.container.updatedAt = new Date().toISOString();
                window.app.containers[containerIndex] = this.container;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                await window.app.autoSave();
            }
            
            window.app.showNotification('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
        }
    }

    getColorId(color) {
        if (!color || color.trim() === '') {
            return '0'; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä BrickLink
        }
        
        const colorMap = {
            'Red': '4',
            'Blue': '1',
            'Yellow': '3',
            'Green': '2',
            'White': '1',
            'Black': '0',
            'Light Gray': '7',
            'Dark Gray': '8',
            'Light Blue': '9',
            'Dark Blue': '10',
            'Orange': '11',
            'Purple': '12',
            'Pink': '13',
            'Brown': '14',
            'Tan': '15',
            'Lime': '16',
            'Magenta': '17',
            'Nougat': '18',
            'Light Nougat': '19',
            'Dark Nougat': '20',
            'Silver': '21',
            'Gold': '22',
            'Copper': '23',
            'Pearl': '24',
            'Transparent': '25',
            'Transparent Red': '26',
            'Transparent Blue': '27',
            'Transparent Yellow': '28',
            'Transparent Green': '29',
            'Transparent Orange': '30',
            'Transparent Purple': '31',
            'Transparent Pink': '32',
            'Transparent Brown': '33',
            'Transparent Light Blue': '34',
            'Transparent Dark Blue': '35',
            'Transparent Light Gray': '36',
            'Transparent Dark Gray': '37',
            'Transparent Black': '38',
            'Transparent White': '39',
            'Transparent Lime': '40',
            'Transparent Magenta': '41',
            'Transparent Nougat': '42',
            'Transparent Light Nougat': '43',
            'Transparent Dark Nougat': '44',
            'Transparent Silver': '45',
            'Transparent Gold': '46',
            'Transparent Copper': '47',
            'Transparent Pearl': '48'
        };
        return colorMap[color] || '0'; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    }

    updateGridSize() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–µ—Ç–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        if (this.container) {
            this.renderGrid();
        }
    }

    setupImageUpdate(editor) {
        const partInput = editor.querySelector('#cell-part');
        const colorInput = editor.querySelector('#cell-color');
        const imageElement = editor.querySelector('#part-image');
        const placeholderElement = editor.querySelector('#part-image-placeholder');

        const updateImage = async () => {
            const partValue = partInput.value.trim();
            const colorValue = colorInput.value.trim();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
            if (!partValue) {
                this.showImagePlaceholder(imageElement, placeholderElement);
                return;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º partId –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "3001 - Brick 2x4")
            const partId = partValue.split(' - ')[0].trim();
            
            // –ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä BrickLink (ID = 0)
            const colorId = colorValue ? this.getColorId(colorValue) : '0';

            try {
                const imageUrl = this.getPartImageUrl(partId, colorId);
                await this.loadPartImage(imageElement, placeholderElement, imageUrl);
            } catch (error) {
                console.warn('Failed to load part image:', error);
                this.showImagePlaceholder(imageElement, placeholderElement);
            }
        };

        // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑ —Å–ø–∏—Å–∫–∞

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if (partInput.value.trim() && colorInput.value.trim()) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—è—Ö, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            updateImage();
        } else {
            // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            this.showImagePlaceholder(imageElement, placeholderElement);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateImage –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
        return updateImage;
    }

    getPartImageUrl(partId, colorId) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º ImageManager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –Ω–∞–ø—Ä—è–º—É—é
            if (window.imageManager) {
                return window.imageManager.getBrickLinkImageUrl(partId, colorId);
            }
            
            // Fallback URL –¥–ª—è BrickLink
            return `https://img.bricklink.com/ItemImage/PN/${colorId}/${partId}.png`;
        } catch (error) {
            console.warn('Failed to get image URL:', error);
            // Fallback URL –¥–ª—è BrickLink
            return `https://img.bricklink.com/ItemImage/PN/${colorId}/${partId}.png`;
        }
    }

    async loadPartImage(imageElement, placeholderElement, imageUrl) {
        console.log('Loading image:', imageUrl);
        return new Promise((resolve, reject) => {
            const img = new Image();
            
            img.onload = () => {
                console.log('Image loaded successfully');
                imageElement.src = imageUrl;
                imageElement.style.display = 'block';
                placeholderElement.style.display = 'none';
                resolve();
            };
            
            img.onerror = (error) => {
                console.warn('Image failed to load:', error, 'URL:', imageUrl);
                this.showImagePlaceholder(imageElement, placeholderElement);
                reject(new Error('Failed to load image'));
            };
            
            img.src = imageUrl;
        });
    }

    showImagePlaceholder(imageElement, placeholderElement) {
        imageElement.style.display = 'none';
        imageElement.src = '';
        placeholderElement.style.display = 'flex';
    }
}
