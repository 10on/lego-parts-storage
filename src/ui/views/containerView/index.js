// –í–∏–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ - —Å–µ—Ç–∫–∞ —Å —è—á–µ–π–∫–∞–º–∏
class ContainerView {
    constructor() {
        this.container = null;
        this.isEditing = false;
        this.selectedCells = new Set();
        this.isMergeMode = false;
        this.mergeSelectedCells = new Set();
        this.isSplitMode = false;
    }

    setContainer(container) {
        console.log('Setting container:', container);
        this.container = container;
        this.render();
    }

    render() {
        console.log('Rendering container view:', this.container);
        if (!this.container) {
            console.error('No container to render!');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const title = document.getElementById('container-title');
        if (title) {
            title.textContent = this.container.name;
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–µ—Ç–∫—É
        this.renderGrid();
        this.setupEventListeners();
    }

    renderGrid() {
        const grid = document.getElementById('container-grid');
        if (!grid || !this.container) return;

        const { rows, cols, cells } = this.container;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
        grid.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
        grid.style.gridTemplateRows = `repeat(${rows}, 1fr)`;

        // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
        grid.innerHTML = '';

        // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ
        for (let i = 0; i < rows * cols; i++) {
            const cellData = cells[i];
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —è—á–µ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (–Ω–æ –Ω–µ –ø–µ—Ä–≤–æ–π)
            if (this.isCellPartOfMerge(i, cells)) {
                continue;
            }
            
            const cell = this.createCell(i, cellData);
            grid.appendChild(cell);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä—ã –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        this.updateSplitModeCursors();
    }

    isCellPartOfMerge(cellIndex, cells) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ —á–∞—Å—Ç—å—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (–Ω–æ –Ω–µ –ø–µ—Ä–≤–æ–π)
        for (let i = 0; i < cells.length; i++) {
            const cellData = cells[i];
            if (cellData && cellData.type === 'merged') {
                const { startIndex, cellCount } = cellData;
                const endIndex = startIndex + cellCount - 1;
                
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è, –Ω–æ –≤—Ö–æ–¥–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
                if (cellIndex > startIndex && cellIndex <= endIndex) {
                    return true;
                }
            }
        }
        return false;
    }

    createCell(index, cellData) {
        const cell = document.createElement('div');
        cell.className = 'grid-cell';
        cell.dataset.cellIndex = index;
        
        if (cellData) {
            cell.innerHTML = this.renderCellContent(cellData);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
            if (cellData.type === 'merged') {
                cell.classList.add('merged');
                this.applyMergedCellStyles(cell, cellData, index);
                
                // –ï—Å–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è - –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å empty
                if (!cellData.items || cellData.items.length === 0) {
                    cell.classList.add('empty');
                } else {
                    cell.classList.add('filled');
                }
            } else {
                cell.classList.add('filled');
            }
        } else {
            cell.classList.add('empty');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä—è–º–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —è—á–µ–π–∫–∏
        cell.addEventListener('click', (e) => {
            console.log('Cell click event triggered!', index);
            this.handleCellClick(e, cell);
        });

        cell.addEventListener('dblclick', (e) => {
            console.log('Cell double-click event triggered!', index);
            this.handleCellDoubleClick(e, cell);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º drag & drop –¥–ª—è —è—á–µ–µ–∫ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        if (cellData && cellData.items && cellData.items.length > 0) {
            this.setupCellDragDrop(cell, cellData, index);
        }

        return cell;
    }

    applyMergedCellStyles(cell, cellData, startIndex) {
        const { rows, cols } = this.container;
        const { direction, cellCount } = cellData;
        
        const startRow = Math.floor(startIndex / cols) + 1; // +1 –¥–ª—è CSS Grid (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
        const startCol = (startIndex % cols) + 1;
        
        if (direction === 'horizontal') {
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            cell.style.gridColumn = `${startCol} / ${startCol + cellCount}`;
            cell.style.gridRow = `${startRow} / ${startRow + 1}`;
        } else {
            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            cell.style.gridColumn = `${startCol} / ${startCol + 1}`;
            cell.style.gridRow = `${startRow} / ${startRow + cellCount}`;
        }
    }

    renderCellContent(cellData) {
        if (cellData && cellData.type === 'merged') {
            // –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–º –¢–û–ß–ù–û –¢–ê–ö –ñ–ï –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ
            if (!cellData.items || cellData.items.length === 0) {
                // –ü—É—Å—Ç–∞—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –ø—É—Å—Ç—É—é –æ–±—ã—á–Ω—É—é
                return '<div class="cell-content"></div>';
            }
            
            // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–π
            return this.renderMultipleParts(cellData.items, true);
        }
        
        if (cellData) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Å—Å–∏–≤ –¥–µ—Ç–∞–ª–µ–π (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
            if (cellData.items && cellData.items.length > 0) {
                return this.renderMultipleParts(cellData.items, false);
            }
            
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–¥–Ω–∞ –¥–µ—Ç–∞–ª—å
            if (cellData.partId) {
                return this.renderSinglePart(cellData);
            }
        }
        
        // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
        return '<div class="cell-content"></div>';
    }

    renderSinglePart(partData) {
            return `
                <div class="cell-content">
                ${partData.image ? `<img src="${partData.image}" alt="${partData.name}" class="cell-image" onerror="this.style.display='none'">` : ''}
                </div>
            `;
        }
        
    renderMultipleParts(parts, isMerged = false) {
        if (!parts || parts.length === 0) {
            return '<div class="cell-content"></div>';
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–±–æ–ª—å—à–µ —Å–Ω–∞—á–∞–ª–∞)
        const sortedParts = [...parts].sort((a, b) => (b.quantity || 1) - (a.quantity || 1));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –¥–µ—Ç–∞–ª–∏ –≤ —Ä—è–¥, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫—Ä—ã–≤–∞–µ–º
        const visibleParts = sortedParts.slice(0, 3);
        const hiddenCount = Math.max(0, sortedParts.length - 3);
        
        const partsHtml = visibleParts.map((part, index) => {
            return `
                <div class="cell-part">
                    <div class="part-image-container-small">
                        ${part.image ? `<img src="${part.image}" alt="${part.name}" class="cell-image-small" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" onload="this.nextElementSibling.style.display='none';">` : ''}
                        <div class="part-image-placeholder-small" style="${part.image ? 'display: flex;' : ''}">
                            <div class="placeholder-icon-tiny">üß±</div>
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        const hiddenHtml = hiddenCount > 0 ? 
            `<div class="hidden-parts">+${hiddenCount}</div>` : '';

        return `
            <div class="cell-content multiple-parts ${isMerged ? 'merged' : ''}">
                ${partsHtml}
                ${hiddenHtml}
            </div>
        `;
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —è—á–µ–µ–∫ —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ createCell()
        // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
        const editModeBtn = document.getElementById('edit-mode-btn');
        if (editModeBtn) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            editModeBtn.replaceWith(editModeBtn.cloneNode(true));
            const newEditModeBtn = document.getElementById('edit-mode-btn');
            newEditModeBtn.addEventListener('click', () => {
                this.toggleEditMode();
            });
        }

        const saveBtn = document.getElementById('save-container-btn');
        if (saveBtn) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            saveBtn.replaceWith(saveBtn.cloneNode(true));
            const newSaveBtn = document.getElementById('save-container-btn');
            newSaveBtn.addEventListener('click', () => {
                this.saveContainer();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        const backBtn = document.getElementById('back-to-home');
        if (backBtn) {
            backBtn.replaceWith(backBtn.cloneNode(true));
            const newBackBtn = document.getElementById('back-to-home');
            newBackBtn.addEventListener('click', () => {
                if (window.app) {
                    window.location.hash = 'home';
                }
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —è—á–µ–µ–∫
        const mergeBtn = document.getElementById('merge-cells-btn');
        if (mergeBtn) {
            mergeBtn.replaceWith(mergeBtn.cloneNode(true));
            const newMergeBtn = document.getElementById('merge-cells-btn');
            newMergeBtn.addEventListener('click', () => {
                this.toggleMergeMode();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–±–∏–≤–∞–Ω–∏—è —è—á–µ–µ–∫
        const splitBtn = document.getElementById('split-cells-btn');
        if (splitBtn) {
            splitBtn.replaceWith(splitBtn.cloneNode(true));
            const newSplitBtn = document.getElementById('split-cells-btn');
            newSplitBtn.addEventListener('click', () => {
                this.toggleSplitMode();
            });
        }

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º
        const confirmMergeBtn = document.getElementById('confirm-merge-btn');
        if (confirmMergeBtn) {
            confirmMergeBtn.replaceWith(confirmMergeBtn.cloneNode(true));
            const newConfirmBtn = document.getElementById('confirm-merge-btn');
            newConfirmBtn.addEventListener('click', () => {
                this.confirmMerge();
            });
        }

        const cancelMergeBtn = document.getElementById('cancel-merge-btn');
        if (cancelMergeBtn) {
            cancelMergeBtn.replaceWith(cancelMergeBtn.cloneNode(true));
            const newCancelBtn = document.getElementById('cancel-merge-btn');
            newCancelBtn.addEventListener('click', () => {
                this.cancelMerge();
            });
        }
    }

    handleCellClick(e, cell) {
        console.log('Cell clicked!', cell, this.isEditing, this.isMergeMode, this.isSplitMode);
        if (this.isSplitMode) {
            this.splitMergedCell(cell);
        } else if (this.isMergeMode) {
            this.toggleMergeCellSelection(cell);
        } else if (this.isEditing) {
            this.toggleCellSelection(cell);
        } else {
            this.openCellEditor(cell);
        }
    }

    handleCellDoubleClick(e, cell) {
        this.openCellEditor(cell);
    }

    toggleCellSelection(cell) {
        if (this.selectedCells.has(cell)) {
            this.selectedCells.delete(cell);
            cell.classList.remove('selected');
        } else {
            this.selectedCells.add(cell);
            cell.classList.add('selected');
        }
    }

    async openCellEditor(cell) {
        console.log('Opening cell editor for cell:', cell);
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
        this.closeCellEditor();

        const cellIndex = parseInt(cell.dataset.cellIndex);
        const cellData = this.container.cells[cellIndex];
        
        console.log('Cell index:', cellIndex, 'Cell data:', cellData);

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'cell-editor-modal';
        modal.id = 'cell-editor-modal';

        const editor = document.createElement('div');
        editor.className = 'cell-editor';
        
        try {
            editor.innerHTML = await this.renderCellEditor(cellData, cellIndex);
            console.log('Editor HTML created successfully');
        } catch (error) {
            console.error('Error creating editor HTML:', error);
            return;
        }
        
        modal.appendChild(editor);
        document.body.appendChild(modal);
        cell.classList.add('editing');
        
        console.log('Modal editor created and added to body');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        this.setupCellEditorListeners(editor, cell, cellIndex);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeCellEditor();
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeCellEditor();
            }
        }, { once: true });
        
        console.log('Cell editor modal should be visible now!');
    }

    async renderCellEditor(cellData, cellIndex) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π
        const isMerged = cellData && cellData.type === 'merged';
        const hasItems = isMerged && cellData.items && cellData.items.length > 0;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let displayData = null;
        let existingParts = [];
        
        if (isMerged && hasItems) {
            // –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π –¥–µ—Ç–∞–ª–∏
            displayData = cellData.items[0];
            existingParts = cellData.items;
        } else if (cellData && cellData.items && cellData.items.length > 0) {
            // –î–ª—è –æ–±—ã—á–Ω–æ–π —è—á–µ–π–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
            displayData = cellData.items[0];
            existingParts = cellData.items;
        } else if (cellData && cellData.partId) {
            // –î–ª—è –æ–±—ã—á–Ω–æ–π —è—á–µ–π–∫–∏ —Å –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª—å—é
            displayData = cellData;
            existingParts = [cellData];
        }
        
        const html = `
            <div class="cell-editor-header">
                <div class="header-left">
                    <h4>${isMerged ? 'üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞' : (existingParts.length > 0 ? '‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—è–º–∏' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å')}</h4>
                    <span class="cell-position">–Ø—á–µ–π–∫–∞ ${cellIndex + 1}${isMerged ? ` (${cellData.cellCount} —è—á–µ–µ–∫)` : ''}${existingParts.length > 0 ? ` ‚Ä¢ ${existingParts.length} –¥–µ—Ç–∞–ª–µ–π` : ''}</span>
                </div>
                <button type="button" class="close-btn" id="modal-close">‚úï</button>
            </div>
            <div class="cell-editor-content">
                ${existingParts.length > 0 ? `
                    <div class="editor-tabs">
                        <button type="button" class="tab-btn active" data-tab="existing">üì¶ –¢–µ–∫—É—â–∏–µ –¥–µ—Ç–∞–ª–∏ (${existingParts.length})</button>
                        <button type="button" class="tab-btn" data-tab="add-new">‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é</button>
                    </div>
                ` : ''}
                
                <div class="tab-content">
                    ${existingParts.length > 0 ? `
                        <div class="tab-panel active" id="tab-existing">
                            <div class="existing-parts-section">
                                <div class="existing-parts-list">
                                    ${await Promise.all(existingParts.map(async (item, index) => {
                                        const colorName = await this.getColorName(item.colorId);
                                        return `
                                            <div class="existing-part-item" data-part-id="${item.partId}" data-color-id="${item.colorId}">
                                                <div class="part-image-small">
                                                    ${item.image ? `<img src="${item.image}" alt="${item.partId}" class="part-thumbnail" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" onload="this.nextElementSibling.style.display='none';">` : ''}
                                                    <div class="part-thumbnail-placeholder" style="${item.image ? 'display: flex;' : ''}">
                                                        <div class="placeholder-icon-small">üß±</div>
                                                    </div>
                                                </div>
                                                <div class="part-info">
                                                    <div class="part-id">${item.partId}</div>
                                                    <div class="part-color">${colorName}</div>
                                                </div>
                                                <div class="part-quantity">
                                                    <input type="number" value="${item.quantity || ''}" max="999" class="quantity-input" data-index="${index}">
                                                </div>
                                                <div class="part-actions">
                                                    <button type="button" class="btn-edit-part" data-index="${index}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å">‚úèÔ∏è</button>
                                                    <button type="button" class="btn-remove-part" data-index="${index}" title="–£–¥–∞–ª–∏—Ç—å –¥–µ—Ç–∞–ª—å">üóëÔ∏è</button>
                                                </div>
                                            </div>
                                        `;
                                    })).then(html => html.join(''))}
                                </div>
                                <div class="existing-parts-actions">
                                    <button type="button" class="btn btn-danger" id="cell-clear">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏</button>
                                </div>
                        </div>
                    </div>
                ` : ''}
                    
                    <div class="tab-panel ${existingParts.length === 0 ? 'active' : ''}" id="tab-add-new">
                        <div class="form-and-image-container">
                <form class="cell-editor-form">
                    <div class="form-group">
                        <label class="form-label">–î–µ—Ç–∞–ª—å *</label>
                        <input type="text" class="form-input autocomplete-input" id="cell-part" value="${this.formatPartValue(cellData)}" placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏..." required>
                        <small class="form-help">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ BrickLink</small>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">–¶–≤–µ—Ç *</label>
                            <input type="text" class="form-input autocomplete-input" id="cell-color" value="${displayData?.color || ''}" placeholder="–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å..." required disabled>
                            <div class="color-restriction-info" id="cell-color-restriction-info" style="display: none;">
                                <small>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏</small>
                            </div>
                            <small class="form-help">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –¥–µ—Ç–∞–ª–∏</small>
                        </div>
                        <div class="form-group">
                            <label class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                            <input type="number" class="form-input" id="cell-quantity" value="${displayData?.quantity || ''}" placeholder="–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ" max="999">
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary">
                                        <span>‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å</span>
                        </button>
                        <button type="button" class="btn btn-secondary" id="cell-cancel">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
                <div class="part-image-container">
                    <div class="part-image-wrapper">
                        <img id="part-image" src="" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏" class="part-image" style="display: none;">
                        <div id="part-image-placeholder" class="part-image-placeholder">
                            <div class="placeholder-icon">üñºÔ∏è</div>
                            <div class="placeholder-text">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∏ —Ü–≤–µ—Ç</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        console.log('Generated HTML contains part-image-container:', html.includes('part-image-container'));
        return html;
    }

    formatPartValue(cellData) {
        if (!cellData) return '';
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–π –¥–µ—Ç–∞–ª–∏
        if (cellData.type === 'merged' && cellData.items && cellData.items.length > 0) {
            const firstItem = cellData.items[0];
            if (firstItem.name) {
                return `${firstItem.partId} - ${firstItem.name}`;
            }
            return firstItem.partId;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —è—á–µ–π–∫–∞
        if (cellData.partId) {
            if (cellData.name) {
                return `${cellData.partId} - ${cellData.name}`;
            }
            return cellData.partId;
        }
        
        return '';
    }

    setupCellEditorListeners(editor, cell, cellIndex) {
        const form = editor.querySelector('.cell-editor-form');
        const cancelBtn = editor.querySelector('#cell-cancel');
        const clearBtn = editor.querySelector('#cell-clear');
        const closeBtn = editor.querySelector('#modal-close');

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveCellData(cell, cellIndex, editor);
        });

        cancelBtn.addEventListener('click', () => {
            this.clearValidationErrors();
            this.closeCellEditor();
        });

        closeBtn.addEventListener('click', () => {
            this.closeCellEditor();
        });

        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                this.clearCellData(cell, cellIndex);
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const updateImage = this.setupImageUpdate(editor);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const cellData = this.container.cells[cellIndex];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —è—á–µ–π–∫–∏
        if (cellData && cellData.partId && cellData.color) {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
            setTimeout(() => {
                updateImage();
            }, 100);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        this.setupPartAutocomplete(editor, updateImage);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
        this.setupColorAutocomplete(editor, updateImage);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–µ—Ç–∞–ª–µ–π
        this.setupExistingPartsListeners(editor, cell, cellIndex);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–∞–±–æ–≤
        this.setupTabListeners(editor);
    }

    setupPartAutocomplete(editor, updateImage) {
        const partInput = editor.querySelector('#cell-part');

        if (!partInput || !window.brickLinkData || !window.brickLinkData.isLoaded) {
            console.warn('BrickLink data not loaded, using simple input');
            return;
        }

        const partAutocomplete = new AutoComplete(partInput, {
            minChars: 2,
            delay: 200,
            placeholder: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏...',
            noResultsText: '–î–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
            showCategories: true,
            source: async (query) => {
                return window.brickLinkData.searchParts(query);
            },
            onSelect: async (value, item) => {
                try {
                    // value —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç partId, –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    const partData = await window.brickLinkData.getPartById(value);
                    if (partData) {
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "ID - –ù–∞–∑–≤–∞–Ω–∏–µ"
                        partInput.value = `${partData.partId} - ${partData.name}`;
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ID
                        partInput.value = value;
                    }
                } catch (error) {
                    console.warn('Failed to get part data:', error);
                    partInput.value = value;
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ Part ID –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
                this.handleCellPartIdChange(value, editor);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–µ—Ç–∞–ª–∏
                if (updateImage) updateImage();
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ Part ID
        partInput.addEventListener('input', (e) => {
            const value = e.target.value;
            // –ò–∑–≤–ª–µ–∫–∞–µ–º Part ID –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç "ID - –ù–∞–∑–≤–∞–Ω–∏–µ")
            const partId = value.includes(' - ') ? value.split(' - ')[0] : value;
            this.handleCellPartIdChange(partId, editor);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ Part ID
            if (updateImage) {
                setTimeout(() => updateImage(), 200);
            }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        this.partAutocomplete = partAutocomplete;
    }

    setupColorAutocomplete(editor, updateImage) {
        const colorInput = editor.querySelector('#cell-color');

        if (!colorInput) {
            console.warn('Color input not found');
            return;
        }

        if (!window.brickLinkData || !window.brickLinkData.isLoaded) {
            console.warn('BrickLink data not loaded, using simple input');
            return;
        }

        const colorAutocomplete = new AutoComplete(colorInput, {
            minChars: 0,
            delay: 100,
            placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç...',
            noResultsText: '–¶–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
            source: async (query) => {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                if (this.availableColors && this.availableColors.length > 0) {
                    const filteredColors = this.availableColors.filter(color => 
                        color.name.toLowerCase().includes(query.toLowerCase())
                    );
                    return filteredColors.map(color => ({
                        value: color.name,
                        label: color.name,
                        rgb: color.rgb,
                        category: '–¶–≤–µ—Ç–∞'
                    }));
                }
                
                // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫
                return window.brickLinkData.searchColors(query);
            },
            onSelect: (value, item) => {
                colorInput.value = value;
                // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
                this.validateCellSelectedColor(value, editor);
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞
                if (updateImage) updateImage();
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–∞
        colorInput.addEventListener('input', (e) => {
            this.validateCellSelectedColor(e.target.value, editor);
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        this.colorAutocomplete = colorAutocomplete;
    }

    setupExistingPartsListeners(editor, cell, cellIndex) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        editor.querySelectorAll('.quantity-input').forEach(input => {
            input.addEventListener('change', (e) => {
                const index = parseInt(e.target.dataset.index);
                const quantityValue = e.target.value;
                const newQuantity = quantityValue ? parseInt(quantityValue) : null;
                this.updatePartQuantity(cell, cellIndex, index, newQuantity);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
        editor.querySelectorAll('.btn-remove-part').forEach(button => {
            button.addEventListener('click', (e) => {
                const index = parseInt(e.target.dataset.index);
                this.removePartFromCell(cell, cellIndex, index, editor);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
        editor.querySelectorAll('.btn-edit-part').forEach(button => {
            button.addEventListener('click', (e) => {
                const index = parseInt(e.target.dataset.index);
                this.editPartInCell(editor, cell, cellIndex, index);
            });
        });
    }

    async updatePartQuantity(cell, cellIndex, partIndex, newQuantity) {
        const cellData = this.container.cells[cellIndex];
        if (!cellData) return;

        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞
        if (cellData.type === 'merged' && cellData.items) {
            if (cellData.items[partIndex]) {
                cellData.items[partIndex].quantity = newQuantity;
                cellData.updatedAt = new Date().toISOString();
            }
        } else if (cellData.items) {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —è—á–µ–π–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
            if (cellData.items[partIndex]) {
                cellData.items[partIndex].quantity = newQuantity;
                this.container.updatedAt = new Date().toISOString();
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —è—á–µ–π–∫–∏
        cell.innerHTML = this.renderCellContent(cellData);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        if (window.app) {
            const containerIndex = window.app.containers.findIndex(c => c.id === this.container.id);
            if (containerIndex > -1) {
                window.app.containers[containerIndex] = this.container;
            }
            await window.app.autoSave();
        }
    }

    async removePartFromCell(cell, cellIndex, partIndex, editor) {
        const cellData = this.container.cells[cellIndex];
        if (!cellData) return;

        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞
        if (cellData.type === 'merged' && cellData.items) {
            cellData.items.splice(partIndex, 1);
            if (cellData.items.length === 0) {
                // –ï—Å–ª–∏ –¥–µ—Ç–∞–ª–µ–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –æ—á–∏—â–∞–µ–º —è—á–µ–π–∫—É
                this.container.cells[cellIndex] = null;
            } else {
                cellData.updatedAt = new Date().toISOString();
            }
        } else if (cellData.items) {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —è—á–µ–π–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
            cellData.items.splice(partIndex, 1);
            if (cellData.items.length === 0) {
                // –ï—Å–ª–∏ –¥–µ—Ç–∞–ª–µ–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –æ—á–∏—â–∞–µ–º —è—á–µ–π–∫—É
                this.container.cells[cellIndex] = null;
            } else {
                this.container.updatedAt = new Date().toISOString();
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —è—á–µ–π–∫–∏
        const updatedCellData = this.container.cells[cellIndex];
        cell.innerHTML = this.renderCellContent(updatedCellData);

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        if (window.app) {
            const containerIndex = window.app.containers.findIndex(c => c.id === this.container.id);
            if (containerIndex > -1) {
                window.app.containers[containerIndex] = this.container;
            }
            await window.app.autoSave();
        }

        // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
        if (!updatedCellData) {
            this.closeCellEditor();
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–µ—Ç–∞–ª–µ–π
            const remainingParts = this.getCellPartsFromData(updatedCellData);
            this.updateTabCounter(editor, remainingParts.length);
            this.updateModalHeader(editor, remainingParts.length);
            
            // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            this.openCellEditor(cell);
        }
    }

    async saveCellData(cell, cellIndex, editor) {
        const partValue = editor.querySelector('#cell-part').value.trim();
        const quantityValue = editor.querySelector('#cell-quantity').value;
        const quantity = quantityValue ? parseInt(quantityValue) : null;
        const color = editor.querySelector('#cell-color').value.trim();
        const editingPartIndex = editor.dataset.editingPartIndex;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!partValue) {
            this.showValidationError(editor.querySelector('#cell-part'), '–î–µ—Ç–∞–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
            return;
        }

        if (!color) {
            this.showValidationError(editor.querySelector('#cell-color'), '–¶–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –æ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏
        if (this.availableColors && this.availableColors.length > 0) {
            const isValidColor = this.availableColors.some(availableColor => 
                availableColor.name.toLowerCase() === color.toLowerCase()
            );
            
            if (!isValidColor) {
                this.showValidationError(editor.querySelector('#cell-color'), `–¶–≤–µ—Ç "${color}" –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–π –¥–µ—Ç–∞–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤.`);
                return;
            }
        }

        if (quantityValue && (quantity < 1 || quantity > 999)) {
            this.showValidationError(editor.querySelector('#cell-quantity'), '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 999');
            return;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º partId –∏ name –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        let partId, name;
        if (partValue.includes(' - ')) {
            [partId, name] = partValue.split(' - ', 2);
        } else {
            partId = partValue;
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
            try {
                const partData = await window.brickLinkData?.getPartById(partId);
                name = partData?.name || partId;
            } catch {
                name = partId;
            }
        }

        const newItem = {
            partId: partId.toUpperCase(),
            quantity,
            colorId: await this.getColorId(color),
            image: await this.generateImageUrl(partId, color),
            lastUpdated: new Date().toISOString()
        };

        // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–µ—Ç–∞–ª–∏
        if (editingPartIndex !== undefined) {
            this.updateExistingPart(cell, cellIndex, parseInt(editingPartIndex), newItem);
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            delete editor.dataset.editingPartIndex;
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            const submitBtn = editor.querySelector('button[type="submit"]');
            if (submitBtn) {
                submitBtn.innerHTML = '<span>‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å</span>';
            }
        } else {
            // –≠—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –¥–µ—Ç–∞–ª–∏
            this.addNewPart(cell, cellIndex, newItem);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —è—á–µ–π–∫–∏
        const updatedCellData = this.container.cells[cellIndex];
        cell.innerHTML = this.renderCellContent(updatedCellData);
        cell.classList.remove('empty', 'editing');
        cell.classList.add('filled');

        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –¥–µ—Ç–∞–ª–∏
        editor.querySelector('#cell-part').value = '';
        editor.querySelector('#cell-color').value = '';
        editor.querySelector('#cell-quantity').value = '1';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É)
        const imageElement = editor.querySelector('#part-image');
        const placeholderElement = editor.querySelector('#part-image-placeholder');
        if (imageElement && placeholderElement) {
            imageElement.style.display = 'none';
            placeholderElement.style.display = 'flex';
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (window.app) {
            await window.app.autoSave();
            const action = editingPartIndex !== undefined ? '–æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–¥–æ–±–∞–≤–ª–µ–Ω–∞';
            window.app.showNotification(`–î–µ—Ç–∞–ª—å "${name}" ${action}!`, 'success');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–µ—Ç–∞–ª–µ–π
        this.updateExistingPartsSection(editor, cellIndex);
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–¢–µ–∫—É—â–∏–µ –¥–µ—Ç–∞–ª–∏" —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        this.switchToExistingPartsTab(editor);
        
        // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä - –ø–æ–∑–≤–æ–ª—è–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–µ—Ç–∞–ª–∏
    }

    addNewPart(cell, cellIndex, newItem) {
        const existingCellData = this.container.cells[cellIndex];
        
        if (existingCellData && existingCellData.type === 'merged') {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å –≤ –º–∞—Å—Å–∏–≤ items
            if (!existingCellData.items) {
                existingCellData.items = [];
            }
            existingCellData.items.push(newItem);
            existingCellData.updatedAt = new Date().toISOString();
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —è—á–µ–π–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            if (!existingCellData) {
                // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                this.container.cells[cellIndex] = { items: [newItem] };
            } else if (existingCellData.items) {
                // –Ø—á–µ–π–∫–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –¥–µ—Ç–∞–ª–µ–π - –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∏–º
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –¥–µ—Ç–∞–ª—å (–ø–æ partId –∏ colorId)
                const existingItemIndex = existingCellData.items.findIndex(item => 
                    item.partId === newItem.partId && item.colorId === newItem.colorId
                );
                
                if (existingItemIndex >= 0) {
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–µ—Ç–∞–ª–∏
                    existingCellData.items[existingItemIndex].quantity += newItem.quantity || 1;
                } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –¥–µ—Ç–∞–ª—å
                    existingCellData.items.push(newItem);
                }
            } else if (existingCellData.partId) {
                // –°—Ç–∞—Ä–∞—è —è—á–µ–π–∫–∞ —Å –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª—å—é - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                const existingPart = { ...existingCellData };
                this.container.cells[cellIndex] = { items: [existingPart, newItem] };
            } else {
                // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                this.container.cells[cellIndex] = { items: [newItem] };
            }
        }

        this.container.updatedAt = new Date().toISOString();
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        if (window.app) {
            const containerIndex = window.app.containers.findIndex(c => c.id === this.container.id);
            if (containerIndex > -1) {
                window.app.containers[containerIndex] = this.container;
            }
        }
    }

    updateExistingPart(cell, cellIndex, partIndex, updatedItem) {
        const cellData = this.container.cells[cellIndex];
        if (!cellData) return;

        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞
        if (cellData.type === 'merged' && cellData.items) {
            if (cellData.items[partIndex]) {
                cellData.items[partIndex] = updatedItem;
                cellData.updatedAt = new Date().toISOString();
            }
        } else if (cellData.items) {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —è—á–µ–π–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
            if (cellData.items[partIndex]) {
                cellData.items[partIndex] = updatedItem;
                this.container.updatedAt = new Date().toISOString();
            }
        }
    }

    switchToExistingPartsTab(editor) {
        const existingTab = editor.querySelector('[data-tab="existing"]');
        const existingPanel = editor.querySelector('#tab-existing');
        
        if (existingTab && existingPanel) {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
            editor.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            editor.querySelectorAll('.tab-panel').forEach(panel => panel.classList.remove('active'));
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É "–¢–µ–∫—É—â–∏–µ –¥–µ—Ç–∞–ª–∏"
            existingTab.classList.add('active');
            existingPanel.classList.add('active');
        }
    }

    async updateExistingPartsSection(editor, cellIndex) {
        const cellData = this.container.cells[cellIndex];
        if (!cellData) return;

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π
        let existingParts = [];
        if (cellData.type === 'merged' && cellData.items) {
            existingParts = cellData.items;
        } else if (cellData.items) {
            existingParts = cellData.items;
        } else if (cellData.partId) {
            existingParts = [cellData];
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–µ—Ç–∞–ª–µ–π
        const existingPartsSection = editor.querySelector('.existing-parts-section');
        if (existingPartsSection) {
            const partsList = existingPartsSection.querySelector('.existing-parts-list');
            if (partsList) {
                // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                partsList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π...</div>';
                
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
                const partsHtml = await Promise.all(existingParts.map(async (item, index) => {
                    const colorName = await this.getColorName(item.colorId);
                    return `
                        <div class="existing-part-item" data-part-id="${item.partId}" data-color-id="${item.colorId}">
                            <div class="part-image-small">
                                ${item.image ? `<img src="${item.image}" alt="${item.partId}" class="part-thumbnail" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" onload="this.nextElementSibling.style.display='none';">` : ''}
                                <div class="part-thumbnail-placeholder" style="${item.image ? 'display: flex;' : ''}">
                                    <div class="placeholder-icon-small">üß±</div>
                                </div>
                            </div>
                            <div class="part-info">
                                <div class="part-id">${item.partId}</div>
                                <div class="part-color">${colorName}</div>
                            </div>
                            <div class="part-quantity">
                                <input type="number" value="${item.quantity || ''}" max="999" class="quantity-input" data-index="${index}">
                            </div>
                            <div class="part-actions">
                                <button type="button" class="btn-edit-part" data-index="${index}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å">‚úèÔ∏è</button>
                                <button type="button" class="btn-remove-part" data-index="${index}" title="–£–¥–∞–ª–∏—Ç—å –¥–µ—Ç–∞–ª—å">üóëÔ∏è</button>
                            </div>
                        </div>
                    `;
                }));
                
                partsList.innerHTML = partsHtml.join('');

                // –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                const cell = document.querySelector(`[data-cell-index="${cellIndex}"]`);
                this.setupExistingPartsListeners(editor, cell, cellIndex);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ç–∞–±–∞
                this.updateTabCounter(editor, existingParts.length);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                this.updateModalHeader(editor, existingParts.length);
            }
        }
    }

    getCellPartsFromData(cellData) {
        if (!cellData) return [];
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞
        if (cellData.type === 'merged' && cellData.items) {
            return cellData.items;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —è—á–µ–π–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
        if (cellData.items) {
            return cellData.items;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä–∞—è —è—á–µ–π–∫–∞ —Å –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª—å—é
        if (cellData.partId) {
            return [cellData];
        }
        
        return [];
    }

    updateTabCounter(editor, count) {
        const existingTab = editor.querySelector('[data-tab="existing"]');
        if (existingTab) {
            existingTab.textContent = `üì¶ –¢–µ–∫—É—â–∏–µ –¥–µ—Ç–∞–ª–∏ (${count})`;
        }
    }

    updateModalHeader(editor, count) {
        const cellPosition = editor.querySelector('.cell-position');
        if (cellPosition) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            const currentText = cellPosition.textContent;
            const cellNumber = currentText.match(/–Ø—á–µ–π–∫–∞ (\d+)/);
            if (cellNumber) {
                cellPosition.textContent = `–Ø—á–µ–π–∫–∞ ${cellNumber[1]} ‚Ä¢ ${count} –¥–µ—Ç–∞–ª–µ–π`;
            }
        }
    }

    setupTabListeners(editor) {
        const tabButtons = editor.querySelectorAll('.tab-btn');
        const tabPanels = editor.querySelectorAll('.tab-panel');

        tabButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const targetTab = e.target.dataset.tab;
                
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –ø–∞–Ω–µ–ª–µ–π
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabPanels.forEach(panel => panel.classList.remove('active'));
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –ø–∞–Ω–µ–ª—å
                e.target.classList.add('active');
                const targetPanel = editor.querySelector(`#tab-${targetTab}`);
                if (targetPanel) {
                    targetPanel.classList.add('active');
                }
            });
        });
    }

    async editPartInCell(editor, cell, cellIndex, partIndex) {
        const cellData = this.container.cells[cellIndex];
        if (!cellData) return;

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        let partData = null;
        if (cellData.type === 'merged' && cellData.items) {
            partData = cellData.items[partIndex];
        } else if (cellData.items) {
            partData = cellData.items[partIndex];
        }

        if (!partData) return;

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–∞–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –¥–µ—Ç–∞–ª–∏
        const addNewTab = editor.querySelector('[data-tab="add-new"]');
        const addNewPanel = editor.querySelector('#tab-add-new');
        if (addNewTab && addNewPanel) {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
            editor.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            editor.querySelectorAll('.tab-panel').forEach(panel => panel.classList.remove('active'));
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            addNewTab.classList.add('active');
            addNewPanel.classList.add('active');
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª–∏
        const partInput = editor.querySelector('#cell-part');
        const colorInput = editor.querySelector('#cell-color');
        const quantityInput = editor.querySelector('#cell-quantity');

        if (partInput) {
            partInput.value = partData.partId;
        }
        if (colorInput) {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ ID
            const colorName = await this.getColorName(partData.colorId);
            colorInput.value = colorName;
        }
        if (quantityInput) {
            quantityInput.value = partData.quantity || 1;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const updateImage = this.setupImageUpdate(editor);
        if (updateImage) {
            setTimeout(() => updateImage(), 100);
        }

        // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–µ—Ç–∞–ª–∏
        editor.dataset.editingPartIndex = partIndex;
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const submitBtn = editor.querySelector('button[type="submit"]');
        if (submitBtn) {
            submitBtn.innerHTML = '<span>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</span>';
        }
    }

    showValidationError(input, message) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        this.clearValidationErrors();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –æ—à–∏–±–∫–∏
        input.classList.add('error');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const errorDiv = document.createElement('div');
        errorDiv.className = 'validation-error';
        errorDiv.textContent = message;
        input.parentNode.appendChild(errorDiv);
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π
        input.focus();
        input.select();
    }

    clearValidationErrors() {
        const editor = document.querySelector('.cell-editor');
        if (editor) {
            editor.querySelectorAll('.error').forEach(el => el.classList.remove('error'));
            editor.querySelectorAll('.validation-error').forEach(el => el.remove());
        }
    }

    async generateImageUrl(partId, color) {
        // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è BrickLink
        const colorCode = await this.getColorId(color) || '1';
        return `https://img.bricklink.com/ItemImage/PN/${colorCode}/${partId}.png`;
    }

    async clearCellData(cell, cellIndex) {
        this.container.cells[cellIndex] = null;
        this.container.updatedAt = new Date().toISOString();

        cell.innerHTML = this.renderCellContent(null);
        cell.classList.remove('filled');
        cell.classList.add('empty');

        this.closeCellEditor();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (window.app) {
            await window.app.autoSave();
            window.app.showNotification('–Ø—á–µ–π–∫–∞ –æ—á–∏—â–µ–Ω–∞!', 'success');
        }
    }

    closeCellEditor() {
        // –û—á–∏—â–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç—ã
        if (this.partAutocomplete) {
            this.partAutocomplete.destroy();
            this.partAutocomplete = null;
        }
        
        if (this.colorAutocomplete) {
            this.colorAutocomplete.destroy();
            this.colorAutocomplete = null;
        }

        const modal = document.getElementById('cell-editor-modal');
        if (modal) {
            modal.remove();
        }
        
        document.querySelectorAll('.grid-cell.editing').forEach(cell => {
            cell.classList.remove('editing');
        });
    }

    toggleEditMode() {
        this.isEditing = !this.isEditing;
        const editBtn = document.getElementById('edit-mode-btn');
        
        if (this.isEditing) {
            editBtn.textContent = '–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';
            editBtn.classList.add('active');
            document.querySelectorAll('.grid-cell').forEach(cell => {
                cell.classList.add('editable');
            });
        } else {
            editBtn.textContent = '–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';
            editBtn.classList.remove('active');
            document.querySelectorAll('.grid-cell').forEach(cell => {
                cell.classList.remove('editable', 'selected');
            });
            this.selectedCells.clear();
        }
    }

    async saveContainer() {
        if (window.app) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const containerIndex = window.app.containers.findIndex(c => c.id === this.container.id);
            if (containerIndex > -1) {
                this.container.updatedAt = new Date().toISOString();
                window.app.containers[containerIndex] = this.container;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                await window.app.autoSave();
            }
            
            window.app.showNotification('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
        }
    }

    async getColorId(color) {
        if (!color || color.trim() === '') {
            return '0'; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä BrickLink
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç –∏–∑ BrickLink –¥–∞–Ω–Ω—ã—Ö
        if (!window.brickLinkData || !window.brickLinkData.isLoaded) {
            console.warn('BrickLink data not loaded, using fallback color ID');
            return '0'; // Fallback –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É —Ü–≤–µ—Ç—É
        }
        
        try {
            const colorData = await window.brickLinkData.getColorByName(color);
            return colorData ? colorData.id.toString() : '0';
        } catch (error) {
            console.error('Error getting color ID:', error);
            return '0'; // Fallback –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É —Ü–≤–µ—Ç—É
        }
    }

    async getColorName(colorId) {
        if (!colorId || colorId === '0') {
            return 'Default'; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ü–≤–µ—Ç
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç –∏–∑ BrickLink –¥–∞–Ω–Ω—ã—Ö
        if (!window.brickLinkData || !window.brickLinkData.isLoaded) {
            console.warn('BrickLink data not loaded, using fallback color name');
            return `Color ${colorId}`; // Fallback –∫ ID —Ü–≤–µ—Ç–∞
        }
        
        try {
            const colorData = await window.brickLinkData.getColorById(colorId);
            return colorData ? colorData.name : `Color ${colorId}`;
        } catch (error) {
            console.error('Error getting color name:', error);
            return `Color ${colorId}`; // Fallback –∫ ID —Ü–≤–µ—Ç–∞
        }
    }

    updateGridSize() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–µ—Ç–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        if (this.container) {
            this.renderGrid();
        }
    }

    setupImageUpdate(editor) {
        const partInput = editor.querySelector('#cell-part');
        const colorInput = editor.querySelector('#cell-color');
        const imageElement = editor.querySelector('#part-image');
        const placeholderElement = editor.querySelector('#part-image-placeholder');

        const updateImage = async () => {
            const partValue = partInput.value.trim();
            const colorValue = colorInput.value.trim();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
            if (!partValue) {
                this.showImagePlaceholder(imageElement, placeholderElement);
                return;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º partId –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "3001 - Brick 2x4")
            const partId = partValue.split(' - ')[0].trim();
            
            // –ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä BrickLink (ID = 0)
            const colorId = colorValue ? await this.getColorId(colorValue) : '0';

            try {
                const imageUrl = this.getPartImageUrl(partId, colorId);
                await this.loadPartImage(imageElement, placeholderElement, imageUrl);
            } catch (error) {
                console.warn('Failed to load part image:', error);
                this.showImagePlaceholder(imageElement, placeholderElement);
            }
        };

        // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑ —Å–ø–∏—Å–∫–∞

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if (partInput.value.trim() && colorInput.value.trim()) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—è—Ö, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            updateImage();
        } else {
            // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            this.showImagePlaceholder(imageElement, placeholderElement);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateImage –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
        return updateImage;
    }

    getPartImageUrl(partId, colorId) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º ImageManager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –Ω–∞–ø—Ä—è–º—É—é
            if (window.imageManager) {
                return window.imageManager.getBrickLinkImageUrl(partId, colorId);
            }
            
            // Fallback URL –¥–ª—è BrickLink
            return `https://img.bricklink.com/ItemImage/PN/${colorId}/${partId}.png`;
        } catch (error) {
            console.warn('Failed to get image URL:', error);
            // Fallback URL –¥–ª—è BrickLink
            return `https://img.bricklink.com/ItemImage/PN/${colorId}/${partId}.png`;
        }
    }

    async loadPartImage(imageElement, placeholderElement, imageUrl) {
        console.log('Loading image:', imageUrl);
        return new Promise((resolve, reject) => {
            const img = new Image();
            
            img.onload = () => {
                console.log('Image loaded successfully');
                imageElement.src = imageUrl;
                imageElement.style.display = 'block';
                placeholderElement.style.display = 'none';
                resolve();
            };
            
            img.onerror = async (error) => {
                console.warn('Image failed to load:', error, 'URL:', imageUrl);
                
                // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const fallbackUrls = this.getFallbackImageUrls(imageUrl);
                let fallbackLoaded = false;
                
                for (const fallbackUrl of fallbackUrls) {
                    try {
                        const fallbackImg = new Image();
                        const fallbackPromise = new Promise((resolveFallback, rejectFallback) => {
                            fallbackImg.onload = () => {
                                console.log('Fallback image loaded:', fallbackUrl);
                                imageElement.src = fallbackUrl;
                                imageElement.style.display = 'block';
                                placeholderElement.style.display = 'none';
                                fallbackLoaded = true;
                                resolveFallback();
                            };
                            fallbackImg.onerror = () => rejectFallback();
                        });
                        
                        fallbackImg.src = fallbackUrl;
                        await fallbackPromise;
                        break; // –ï—Å–ª–∏ fallback –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                    } catch (fallbackError) {
                        console.warn('Fallback image failed:', fallbackUrl);
                        continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π fallback
                    }
                }
                
                if (!fallbackLoaded) {
                    // –ï—Å–ª–∏ –≤—Å–µ fallback'–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    this.showImagePlaceholderWithError(imageElement, placeholderElement, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
                }
                
                resolve(); // –ù–µ reject'–∏–º, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å UI
            };
            
            img.src = imageUrl;
        });
    }

    showImagePlaceholder(imageElement, placeholderElement) {
        imageElement.style.display = 'none';
        imageElement.src = '';
        placeholderElement.style.display = 'flex';
        placeholderElement.innerHTML = `
            <div class="placeholder-icon">üñºÔ∏è</div>
            <div class="placeholder-text">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∏ —Ü–≤–µ—Ç</div>
        `;
    }

    showImagePlaceholderWithError(imageElement, placeholderElement, errorMessage) {
        imageElement.style.display = 'none';
        imageElement.src = '';
        placeholderElement.style.display = 'flex';
        placeholderElement.innerHTML = `
            <div class="placeholder-icon">‚ùå</div>
            <div class="placeholder-text">${errorMessage}</div>
        `;
        placeholderElement.style.color = 'var(--danger-color)';
    }

    getFallbackImageUrls(originalUrl) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º partId –∏ colorId –∏–∑ URL
        const urlParts = originalUrl.match(/\/PN\/(\d+)\/(\w+)\.png$/);
        if (!urlParts) return [];
        
        const [, colorId, partId] = urlParts;
        const fallbackUrls = [];
        
        // 1. –ü—Ä–æ–±—É–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Ü–≤–µ—Ç–æ–º (ID = 0)
        if (colorId !== '0') {
            fallbackUrls.push(`https://img.bricklink.com/ItemImage/PN/0/${partId}.png`);
        }
        
        // 2. –ü—Ä–æ–±—É–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        const basicColors = ['1', '2', '3', '4', '5']; // White, Tan, Yellow, Orange, Red
        for (const basicColorId of basicColors) {
            if (basicColorId !== colorId) {
                fallbackUrls.push(`https://img.bricklink.com/ItemImage/PN/${basicColorId}/${partId}.png`);
            }
        }
        
        // 3. –ü—Ä–æ–±—É–µ–º —Å —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º (ID = 11)
        if (colorId !== '11') {
            fallbackUrls.push(`https://img.bricklink.com/ItemImage/PN/11/${partId}.png`);
        }
        
        return fallbackUrls;
    }

    // === –ú–ï–¢–û–î–´ –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –Ø–ß–ï–ï–ö ===

    toggleMergeMode() {
        this.isMergeMode = !this.isMergeMode;
        
        if (this.isMergeMode) {
            this.startMergeMode();
        } else {
            this.cancelMerge();
        }
    }

    startMergeMode() {
        console.log('Starting merge mode');
        this.mergeSelectedCells.clear();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const mergeControls = document.getElementById('merge-controls');
        if (mergeControls) {
            mergeControls.classList.remove('hidden');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ä–µ–∂–∏–º–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
        const containerView = document.getElementById('container-view');
        if (containerView) {
            containerView.classList.add('merge-mode');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        const mergeBtn = document.getElementById('merge-cells-btn');
        if (mergeBtn) {
            mergeBtn.textContent = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ';
            mergeBtn.classList.remove('btn-outline');
            mergeBtn.classList.add('btn-danger');
        }
        
        this.updateMergeControls();
    }

    cancelMerge() {
        console.log('Canceling merge mode');
        this.isMergeMode = false;
        this.mergeSelectedCells.clear();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const mergeControls = document.getElementById('merge-controls');
        if (mergeControls) {
            mergeControls.classList.add('hidden');
        }
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —Ä–µ–∂–∏–º–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        const containerView = document.getElementById('container-view');
        if (containerView) {
            containerView.classList.remove('merge-mode');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        const mergeBtn = document.getElementById('merge-cells-btn');
        if (mergeBtn) {
            mergeBtn.textContent = 'üîó –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —è—á–µ–π–∫–∏';
            mergeBtn.classList.add('btn-outline');
            mergeBtn.classList.remove('btn-danger');
        }
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –≤—ã–±–æ—Ä–∞ —Å —è—á–µ–µ–∫
        document.querySelectorAll('.grid-cell').forEach(cell => {
            cell.classList.remove('merge-selectable', 'merge-selected', 'merge-invalid');
        });
    }

    toggleMergeCellSelection(cell) {
        const cellIndex = parseInt(cell.dataset.cellIndex);
        
        if (this.mergeSelectedCells.has(cellIndex)) {
            // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±–æ—Ä–∞
            this.mergeSelectedCells.delete(cellIndex);
            cell.classList.remove('merge-selected');
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —è—á–µ–π–∫—É
            if (this.canAddToMergeSelection(cellIndex)) {
                this.mergeSelectedCells.add(cellIndex);
                cell.classList.remove('merge-invalid');
                cell.classList.add('merge-selected');
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —è—á–µ–π–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞
                cell.classList.add('merge-invalid');
                setTimeout(() => {
                    cell.classList.remove('merge-invalid');
                }, 1000);
            }
        }
        
        this.updateMergeControls();
    }

    canAddToMergeSelection(cellIndex) {
        if (this.mergeSelectedCells.size === 0) {
            return true; // –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞
        }
        
        const { rows, cols } = this.container;
        const currentRow = Math.floor(cellIndex / cols);
        const currentCol = cellIndex % cols;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è—á–µ–π–∫–∞ —Å–æ—Å–µ–¥–Ω—è—è —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏
        for (const selectedIndex of this.mergeSelectedCells) {
            const selectedRow = Math.floor(selectedIndex / cols);
            const selectedCol = selectedIndex % cols;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è—á–µ–π–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ –æ–¥–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ
            const isSameRow = currentRow === selectedRow;
            const isSameCol = currentCol === selectedCol;
            
            if (!isSameRow && !isSameCol) {
                return false; // –Ø—á–µ–π–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è—á–µ–π–∫–∏ —Å–æ—Å–µ–¥–Ω–∏–µ
            const rowDiff = Math.abs(currentRow - selectedRow);
            const colDiff = Math.abs(currentCol - selectedCol);
            
            if (isSameRow && colDiff === 1) {
                return true; // –°–æ—Å–µ–¥–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            }
            if (isSameCol && rowDiff === 1) {
                return true; // –°–æ—Å–µ–¥–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            }
        }
        
        return false;
    }

    updateMergeControls() {
        const countElement = document.getElementById('selected-cells-count');
        const confirmBtn = document.getElementById('confirm-merge-btn');
        
        if (countElement) {
            countElement.textContent = this.mergeSelectedCells.size;
        }
        
        if (confirmBtn) {
            confirmBtn.disabled = this.mergeSelectedCells.size < 2;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã —è—á–µ–µ–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞
        document.querySelectorAll('.grid-cell').forEach(cell => {
            if (this.isMergeMode) {
                cell.classList.add('merge-selectable');
            } else {
                cell.classList.remove('merge-selectable', 'merge-selected', 'merge-invalid');
            }
        });
    }

    confirmMerge() {
        if (this.mergeSelectedCells.size < 2) {
            console.warn('Need at least 2 cells to merge');
            return;
        }
        
        console.log('Confirming merge for cells:', Array.from(this.mergeSelectedCells));
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —è—á–µ–π–∫—É
        const mergedCell = this.createMergedCell(Array.from(this.mergeSelectedCells));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
        this.updateContainerForMerge(Array.from(this.mergeSelectedCells), mergedCell);
        
        // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Å–µ—Ç–∫—É
        this.renderGrid();
        
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        this.cancelMerge();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (window.app) {
            window.app.showNotification('–Ø—á–µ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã!', 'success');
        }
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (window.app) {
            window.app.autoSave();
        }
    }

    createMergedCell(cellIndices) {
        const { rows, cols } = this.container;
        const sortedIndices = cellIndices.sort((a, b) => a - b);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        const firstIndex = sortedIndices[0];
        const lastIndex = sortedIndices[sortedIndices.length - 1];
        
        const firstRow = Math.floor(firstIndex / cols);
        const firstCol = firstIndex % cols;
        const lastRow = Math.floor(lastIndex / cols);
        const lastCol = lastIndex % cols;
        
        const isHorizontal = firstRow === lastRow;
        const isVertical = firstCol === lastCol;
        
        if (!isHorizontal && !isVertical) {
            throw new Error('Cells must be in the same row or column');
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —è—á–µ–µ–∫
        const allItems = [];
        for (const index of sortedIndices) {
            const cellData = this.container.cells[index];
            if (cellData) {
                if (cellData.items) {
                    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞
                    allItems.push(...cellData.items);
                } else if (cellData.partId) {
                    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —è—á–µ–π–∫–∞ —Å –¥–µ—Ç–∞–ª—å—é
                    allItems.push({
                        partId: cellData.partId,
                        name: cellData.name,
                        color: cellData.color,
                        quantity: cellData.quantity,
                        image: cellData.image
                    });
                }
            }
        }
        
        return {
            type: 'merged',
            direction: isHorizontal ? 'horizontal' : 'vertical',
            cellCount: sortedIndices.length,
            startIndex: firstIndex,
            endIndex: lastIndex,
            items: allItems,
            mergedAt: new Date().toISOString()
        };
    }

    updateContainerForMerge(cellIndices, mergedCell) {
        const sortedIndices = cellIndices.sort((a, b) => a - b);
        const startIndex = sortedIndices[0];
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É –Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é
        this.container.cells[startIndex] = mergedCell;
        
        // –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏
        for (let i = 1; i < sortedIndices.length; i++) {
            this.container.cells[sortedIndices[i]] = null;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.container.updatedAt = new Date().toISOString();
    }

    // === –ú–ï–¢–û–î–´ –†–ê–ó–ë–ò–í–ê–ù–ò–Ø –Ø–ß–ï–ï–ö ===

    toggleSplitMode() {
        this.isSplitMode = !this.isSplitMode;
        
        if (this.isSplitMode) {
            this.startSplitMode();
        } else {
            this.cancelSplitMode();
        }
    }

    startSplitMode() {
        console.log('Starting split mode');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        const splitBtn = document.getElementById('split-cells-btn');
        if (splitBtn) {
            splitBtn.textContent = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞–∑–±–∏–≤–∞–Ω–∏–µ';
            splitBtn.classList.remove('btn-outline');
            splitBtn.classList.add('btn-danger');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–±–∏–≤–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
        const containerView = document.getElementById('container-view');
        if (containerView) {
            containerView.classList.add('split-mode');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
        this.updateSplitModeCursors();
    }

    cancelSplitMode() {
        console.log('Canceling split mode');
        this.isSplitMode = false;
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–±–∏–≤–∞–Ω–∏—è
        const containerView = document.getElementById('container-view');
        if (containerView) {
            containerView.classList.remove('split-mode');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        const splitBtn = document.getElementById('split-cells-btn');
        if (splitBtn) {
            splitBtn.textContent = '‚úÇÔ∏è –†–∞–∑–±–∏—Ç—å —è—á–µ–π–∫–∏';
            splitBtn.classList.add('btn-outline');
            splitBtn.classList.remove('btn-danger');
        }
        
        // –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–æ—Ä —Ä–∞–∑–±–∏–≤–∞–Ω–∏—è
        document.querySelectorAll('.grid-cell.merged').forEach(cell => {
            cell.classList.remove('split-selectable');
        });
    }

    updateSplitModeCursors() {
        document.querySelectorAll('.grid-cell.merged').forEach(cell => {
            if (this.isSplitMode) {
                cell.classList.add('split-selectable');
            } else {
                cell.classList.remove('split-selectable');
            }
        });
    }

    splitMergedCell(cell) {
        const cellIndex = parseInt(cell.dataset.cellIndex);
        const cellData = this.container.cells[cellIndex];
        
        if (!cellData || cellData.type !== 'merged') {
            console.warn('Cell is not merged, cannot split');
            return;
        }
        
        console.log('Splitting merged cell:', cellData);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∞–Ω–∏—è
        if (window.confirm(`–†–∞–∑–±–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —è—á–µ–π–∫—É –Ω–∞ ${cellData.cellCount} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —è—á–µ–µ–∫?`)) {
            this.performSplit(cellIndex, cellData);
        }
    }

    performSplit(startIndex, mergedCellData) {
        const { cellCount, items } = mergedCellData;
        const { rows, cols } = this.container;
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º items –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —è—á–µ–π–∫–∞–º
        const itemsPerCell = Math.ceil(items.length / cellCount);
        
        for (let i = 0; i < cellCount; i++) {
            const cellIndex = startIndex + i;
            const startItemIndex = i * itemsPerCell;
            const endItemIndex = Math.min(startItemIndex + itemsPerCell, items.length);
            const cellItems = items.slice(startItemIndex, endItemIndex);
            
            if (cellItems.length > 0) {
                // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é —è—á–µ–π–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
                this.container.cells[cellIndex] = {
                    partId: cellItems[0].partId,
                    name: cellItems[0].name,
                    color: cellItems[0].color,
                    quantity: cellItems.reduce((sum, item) => sum + item.quantity, 0),
                    image: cellItems[0].image,
                    items: cellItems
                };
            } else {
                // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
                this.container.cells[cellIndex] = null;
            }
        }
        
        // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Å–µ—Ç–∫—É
        this.renderGrid();
        
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–±–∏–≤–∞–Ω–∏—è
        this.cancelSplitMode();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (window.app) {
            window.app.showNotification('–Ø—á–µ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∏—Ç–∞!', 'success');
        }
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (window.app) {
            window.app.autoSave();
        }
    }

    setupCellDragDrop(cell, cellData, index) {
        // –î–µ–ª–∞–µ–º —è—á–µ–π–∫—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–π
        cell.draggable = true;
        cell.style.cursor = 'grab';

        cell.addEventListener('dragstart', (e) => {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            const dragData = {
                type: 'cell',
                containerId: this.container.id,
                cellIndex: index,
                cellData: cellData,
                parts: cellData.items || [],
                totalQuantity: cellData.items ? cellData.items.reduce((sum, item) => sum + item.quantity, 0) : 0
            };

            e.dataTransfer.setData('application/json', JSON.stringify(dragData));
            e.dataTransfer.effectAllowed = 'move';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            cell.style.opacity = '0.5';
        });

        cell.addEventListener('dragend', (e) => {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            cell.style.opacity = '1';
        });

        cell.addEventListener('dragenter', (e) => {
            e.preventDefault();
        });

        cell.addEventListener('dragover', (e) => {
            e.preventDefault();
        });

        cell.addEventListener('drop', (e) => {
            e.preventDefault();
            
            const data = e.dataTransfer.getData('application/json');
            if (data) {
                try {
                    const dropData = JSON.parse(data);
                    this.handleCellDrop(dropData, index);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ drop:', error);
                }
            }
        });
    }

    handleCellDrop(dropData, targetCellIndex) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —è—á–µ–µ–∫
        if (dropData.type === 'cell') {
            if (dropData.source === 'buffer') {
                // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ —è—á–µ–π–∫—É
                this.handleBufferToCellDrop(dropData, targetCellIndex);
            } else {
                // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
                this.handleCellToCellDrop(dropData, targetCellIndex);
            }
        }
    }

    handleBufferToCellDrop(dropData, targetCellIndex) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ —è—á–µ–π–∫—É
        const targetCell = this.container.cells[targetCellIndex];
        
        if (!targetCell) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É
            this.container.cells[targetCellIndex] = {
                type: 'single',
                items: dropData.parts
            };
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —è—á–µ–π–∫–µ
            if (!targetCell.items) {
                targetCell.items = [];
            }
            targetCell.items.push(...dropData.parts);
        }

        // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Å–µ—Ç–∫—É
        this.renderGrid();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º SplitView –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞
        if (window.app && window.app.views && window.app.views.split) {
            window.app.views.split.removeFromBuffer(dropData.bufferIndex);
        }

        if (window.app) {
            window.app.showNotification('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –∏–∑ –±—É—Ñ–µ—Ä–∞', 'success');
            window.app.autoSave();
        }
    }

    handleCellToCellDrop(dropData, targetCellIndex) {
        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
        if (dropData.containerId === this.container.id && dropData.cellIndex === targetCellIndex) {
            return; // –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –≤ —Ç—É –∂–µ —è—á–µ–π–∫—É
        }

        const sourceCell = this.container.cells[dropData.cellIndex];
        const targetCell = this.container.cells[targetCellIndex];

        if (sourceCell && sourceCell.items) {
            if (!targetCell) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É
                this.container.cells[targetCellIndex] = {
                    type: 'single',
                    items: [...sourceCell.items]
                };
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —è—á–µ–π–∫–µ
                if (!targetCell.items) {
                    targetCell.items = [];
                }
                targetCell.items.push(...sourceCell.items);
            }

            // –û—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —è—á–µ–π–∫—É
            this.container.cells[dropData.cellIndex] = null;

            // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Å–µ—Ç–∫—É
            this.renderGrid();

            if (window.app) {
                window.app.showNotification('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏', 'success');
                window.app.autoSave();
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ Part ID –≤ –º–æ–¥–∞–ª–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     */
    async handleCellPartIdChange(partId, editor) {
        console.log('handleCellPartIdChange called with:', partId);
        
        const colorInput = editor.querySelector('#cell-color');
        const colorInfo = editor.querySelector('#cell-color-restriction-info');
        
        if (!colorInput) {
            console.warn('Color input not found in editor');
            return;
        }
        
        if (!colorInfo) {
            console.warn('Color info element not found in editor');
            return;
        }
        
        if (!partId || partId.trim() === '') {
            console.log('Empty part ID, disabling color selection');
            // –ï—Å–ª–∏ Part ID –ø—É—Å—Ç–æ–π, –æ—Ç–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
            colorInput.disabled = true;
            colorInput.placeholder = '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å';
            colorInput.value = '';
            colorInfo.style.display = 'none';
            this.availableColors = [];
            return;
        }

        try {
            console.log('Loading colors for part:', partId);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            colorInput.disabled = true;
            colorInput.placeholder = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤...';
            colorInfo.style.display = 'block';
            colorInfo.innerHTML = '<small>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤...</small>';

            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª–∏
            if (window.brickLinkData && window.brickLinkData.isLoaded) {
                console.log('BrickLink data is loaded, fetching colors...');
                this.availableColors = await window.brickLinkData.getAvailableColorsForPart(partId);
                console.log('Available colors:', this.availableColors);
                
                if (this.availableColors.length > 0) {
                    console.log('Found colors, enabling selection');
                    // –í–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
                    colorInput.disabled = false;
                    colorInput.placeholder = `–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ ${this.availableColors.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤`;
                    colorInfo.innerHTML = `<small>‚úÖ –ù–∞–π–¥–µ–Ω–æ ${this.availableColors.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤</small>`;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                    if (this.colorAutocomplete) {
                        this.colorAutocomplete.destroy();
                    }
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é updateImage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                    const newUpdateImage = this.setupImageUpdate(editor);
                    this.setupColorAutocomplete(editor, newUpdateImage);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏
                    if (newUpdateImage) {
                        setTimeout(() => newUpdateImage(), 100);
                    }
                } else {
                    console.log('No colors found for this part');
                    // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
                    colorInput.disabled = true;
                    colorInput.placeholder = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –¥–µ—Ç–∞–ª–∏';
                    colorInput.value = '';
                    colorInfo.innerHTML = '<small>‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –¥–µ—Ç–∞–ª–∏</small>';
                }
            } else {
                console.log('BrickLink data not loaded');
                // BrickLink –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                colorInput.disabled = false;
                colorInput.placeholder = 'BrickLink –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã - –≤–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤—Ä—É—á–Ω—É—é';
                colorInfo.innerHTML = '<small>‚ö†Ô∏è BrickLink –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</small>';
            }
        } catch (error) {
            console.error('Error loading available colors:', error);
            colorInput.disabled = false;
            colorInput.placeholder = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - –≤–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤—Ä—É—á–Ω—É—é';
            colorInfo.innerHTML = '<small>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–≤–µ—Ç–æ–≤</small>';
        }
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –≤ –º–æ–¥–∞–ª–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     */
    validateCellSelectedColor(selectedColorName, editor) {
        console.log('validateCellSelectedColor called with:', selectedColorName);
        console.log('Available colors:', this.availableColors);
        
        if (!this.availableColors || this.availableColors.length === 0) {
            console.log('No available colors, skipping validation');
            return;
        }

        const isValidColor = this.availableColors.some(color => 
            color.name.toLowerCase() === selectedColorName.toLowerCase()
        );

        console.log('Is valid color:', isValidColor);

        const colorInput = editor.querySelector('#cell-color');
        const colorInfo = editor.querySelector('#cell-color-restriction-info');

        if (isValidColor) {
            // –¶–≤–µ—Ç –≤–∞–ª–∏–¥–µ–Ω
            colorInput.style.borderColor = '';
            colorInput.style.backgroundColor = '';
            if (colorInfo) {
                colorInfo.innerHTML = `<small>‚úÖ –¶–≤–µ—Ç "${selectedColorName}" –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–π –¥–µ—Ç–∞–ª–∏</small>`;
                colorInfo.className = 'color-restriction-info success';
            }
        } else {
            // –¶–≤–µ—Ç –Ω–µ –≤–∞–ª–∏–¥–µ–Ω
            colorInput.style.borderColor = 'var(--danger-color)';
            colorInput.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';
            if (colorInfo) {
                colorInfo.innerHTML = `<small>‚ùå –¶–≤–µ—Ç "${selectedColorName}" –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–π –¥–µ—Ç–∞–ª–∏</small>`;
                colorInfo.className = 'color-restriction-info error';
            }
        }
    }
}
