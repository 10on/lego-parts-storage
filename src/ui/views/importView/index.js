// –í–∏–¥ –∏–º–ø–æ—Ä—Ç–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
class ImportView {
    constructor() {
        this.importHistory = [];
    }

    render() {
        console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ ImportView...');
        const container = document.getElementById('import-content');
        if (!container) {
            console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä import-content –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω, —Ä–µ–Ω–¥–µ—Ä–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...');
        container.innerHTML = this.renderImportInterface();
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
        setTimeout(() => {
            this.setupEventListeners();
        }, 100);
    }

    renderImportInterface() {
        return `
            <div class="import-section">
                <h3>–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞</h3>
                <p>–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –∏–ª–∏ LCX —Ñ–∞–π–ª–æ–≤</p>
                <div class="import-form">
                    <input type="file" id="import-file" accept=".json,.lcx.json,.lctx.json,.gz" class="file-input">
                    <div class="import-options">
                        <label class="checkbox-label">
                            <input type="checkbox" id="import-overwrite" checked>
                            –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" id="import-validate">
                            –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
                        </label>
                    </div>
                    <button class="btn btn-primary" id="import-btn">–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                </div>
            </div>

            <div class="import-section">
                <h3>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h3>
                <p>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ JSON</p>
                <button class="btn btn-primary" id="export-json-btn">–≠–∫—Å–ø–æ—Ä—Ç JSON</button>
            </div>

            <div class="import-section">
                <h3>–ò—Å—Ç–æ—Ä–∏—è –∏–º–ø–æ—Ä—Ç–∞</h3>
                <p>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞</p>
                <div class="import-history" id="import-history">
                    ${this.renderImportHistory()}
                </div>
            </div>
        `;
    }

    renderImportHistory() {
        if (this.importHistory.length === 0) {
            return '<p class="text-muted">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</p>';
        }

        return this.importHistory.map(record => `
            <div class="history-item">
                <div class="history-info">
                    <div class="history-type">${record.type}</div>
                    <div class="history-date">${new Date(record.date).toLocaleString('ru-RU')}</div>
                </div>
                <div class="history-details">
                    <div class="history-filename">${record.filename}</div>
                    <div class="history-status ${record.status}">${this.getStatusText(record.status)}</div>
                </div>
            </div>
        `).join('');
    }

    getStatusText(status) {
        const statusMap = {
            'success': '–£—Å–ø–µ—à–Ω–æ',
            'error': '–û—à–∏–±–∫–∞',
            'warning': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
        };
        return statusMap[status] || status;
    }

    setupEventListeners() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π ImportView...');
        
        // –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞
        const importBtn = document.getElementById('import-btn');
        if (importBtn) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω import-btn');
            importBtn.addEventListener('click', () => {
                this.handleImport();
            });
        } else {
            console.log('‚ùå import-btn –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –≠–∫—Å–ø–æ—Ä—Ç JSON
        const exportJsonBtn = document.getElementById('export-json-btn');
        if (exportJsonBtn) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω export-json-btn');
            exportJsonBtn.addEventListener('click', () => {
                console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON');
                this.exportToJSON();
            });
        } else {
            console.log('‚ùå export-json-btn –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }


    }

    handleImport() {
        const fileInput = document.getElementById('import-file');
        const file = fileInput.files[0];
        
        if (!file) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
            return;
        }

        const overwrite = document.getElementById('import-overwrite').checked;
        const validate = document.getElementById('import-validate').checked;

        this.importFile(file, { overwrite, validate });
    }

    importFile(file, options) {
        const reader = new FileReader();
        
        reader.onload = async (e) => {
            try {
                const content = e.target.result;
                const data = this.parseFileContent(content, file.name);
                
                if (options.validate && !this.validateData(data)) {
                    this.addHistoryRecord('import', file.name, 'error', '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
                    return;
                }
                
                await this.processImportedData(data, options.overwrite);
                this.addHistoryRecord('import', file.name, 'success', '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                
                if (window.app) {
                    window.app.showNotification('–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
                }
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
                this.addHistoryRecord('import', file.name, 'error', error.message);
                
                if (window.app) {
                    window.app.showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + error.message, 'error');
                }
            }
        };
        
        reader.readAsText(file);
    }

    parseFileContent(content, filename) {
        const lowerFilename = filename.toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º LCX —Ñ–æ—Ä–º–∞—Ç—ã
        if (lowerFilename.includes('.lcx.json') || lowerFilename.includes('.lctx.json')) {
            return { type: 'lcx', data: JSON.parse(content) };
        }
        
        const extension = filename.split('.').pop().toLowerCase();
        
        switch (extension) {
            case 'json':
                return { type: 'json', data: JSON.parse(content) };
            default:
                throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
        }
    }


    validateData(data) {
        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!data || typeof data !== 'object') {
            return false;
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è LCX –¥–∞–Ω–Ω—ã—Ö
        if (data.type === 'lcx') {
            const lcxData = data.data;
            return lcxData.schemaVersion && lcxData.source && lcxData.tables;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        return true;
    }

    async processImportedData(data, overwrite) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ LCX –¥–∞–Ω–Ω—ã—Ö
        if (data.type === 'lcx') {
            return await this.processLCXData(data.data);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
        const actualData = data.data || data;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–ª–Ω—ã–º —ç–∫—Å–ø–æ—Ä—Ç–æ–º localStorage
        if (actualData.exportType === 'full-localStorage-backup') {
            return await this.processFullBackupData(actualData, overwrite);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if (overwrite) {
            // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            if (actualData.containers) {
                window.app.containers = actualData.containers;
            }
            if (actualData.pileItems) {
                window.app.pileItems = actualData.pileItems;
            }
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º
            if (actualData.containers) {
                window.app.containers.push(...actualData.containers);
            }
            if (actualData.pileItems) {
                window.app.pileItems.push(...actualData.pileItems);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (window.app) {
            window.app.updateViewContent(window.app.currentView);
        }
    }

    async processFullBackupData(data, overwrite) {
        try {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
            const keys = ['project', 'containers', 'snapshots', 'settings', 'imageCache'];
            
            for (const key of keys) {
                if (data[key] !== null) {
                    localStorage.setItem(`lego-storage-${key}`, JSON.stringify(data[key]));
                }
            }
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if (window.app) {
                window.app.showNotification('–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...', 'success');
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ' + error.message);
        }
    }

    async processLCXData(lcxData) {
        // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const progress = new LoadingProgress();
        progress.show([
            { title: '–®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', description: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞—Ä—Å–µ—Ä–∞' },
            { title: '–®–∞–≥ 2: –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞', description: '–ß—Ç–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è LCX –¥–∞–Ω–Ω—ã—Ö' },
            { title: '–®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', description: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–µ—Ç–∞–ª–µ–π' },
            { title: '–®–∞–≥ 4: –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–≤–µ—Ç–æ–≤', description: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–≤–µ—Ç–∞—Ö' },
            { title: '–®–∞–≥ 5: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π', description: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–µ—Ç–∞–ª–µ–π' },
            { title: '–®–∞–≥ 6: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–µ–π', description: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –¥–µ—Ç–∞–ª—å-—Ü–≤–µ—Ç' },
            { title: '–®–∞–≥ 7: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ', description: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è' }
        ], {
            onCancel: () => {
                console.log('‚ùå LCX import cancelled by user');
                progress.hide();
            }
        });

        try {
            // –°–æ–∑–¥–∞–µ–º LCX –∞–¥–∞–ø—Ç–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!window.lcxAdapter) {
                window.lcxAdapter = new LCXIndexedDBAdapter();
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
            const lcxBlob = new Blob([JSON.stringify(lcxData)], { type: 'application/json' });
            lcxBlob.name = 'imported.lcx.json';

            // –ó–∞–≥—Ä—É–∂–∞–µ–º LCX –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            const stats = await window.lcxAdapter.loadFromLCX(lcxBlob, (stepIndex, progressPercent, details) => {
                progress.updateStep(stepIndex, progressPercent, details);
            });
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
            progress.completeStep(6, `–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${stats.parts} –¥–µ—Ç–∞–ª–µ–π, ${stats.colors} —Ü–≤–µ—Ç–æ–≤`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º BrickLink –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            if (window.brickLinkData) {
                window.brickLinkData.dbAdapter = window.lcxAdapter;
                window.brickLinkData.isLoaded = true;
            }

            console.log('‚úÖ LCX data imported successfully:', stats);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                progress.hide();
            }, 1500);
            
            return stats;
        } catch (error) {
            console.error('‚ùå Failed to process LCX data:', error);
            progress.showError(progress.currentStep, error.message);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            setTimeout(() => {
                progress.hide();
            }, 3000);
            
            throw error;
        }
    }

    exportToJSON() {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç JSON...');
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        const data = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
            project: this.getLocalStorageData('lego-storage-project'),
            containers: this.getLocalStorageData('lego-storage-containers'),
            snapshots: this.getLocalStorageData('lego-storage-snapshots'),
            settings: this.getLocalStorageData('lego-storage-settings'),
            imageCache: this.getLocalStorageData('lego-storage-image-cache'),
            
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
            exportedAt: new Date().toISOString(),
            version: '1.0',
            exportType: 'full-localStorage-backup'
        };
        
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', data);
        
        const jsonString = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        this.downloadFile(blob, 'lego-storage-full-export.json');
        
        this.addHistoryRecord('export', 'lego-storage-full-export.json', 'success', '–ü–æ–ª–Ω—ã–π JSON —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        
        console.log('‚úÖ JSON —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    }

    getLocalStorageData(key) {
        try {
            const item = localStorage.getItem(key);
            return item ? JSON.parse(item) : null;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage –¥–ª—è –∫–ª—é—á–∞ ${key}:`, error);
            return null;
        }
    }



    downloadFile(blob, filename) {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    addHistoryRecord(type, filename, status, details) {
        const record = {
            type,
            filename,
            status,
            details,
            date: new Date().toISOString()
        };
        
        this.importHistory.unshift(record);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 50 –∑–∞–ø–∏—Å—è–º–∏
        if (this.importHistory.length > 50) {
            this.importHistory = this.importHistory.slice(0, 50);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        const historyContainer = document.getElementById('import-history');
        if (historyContainer) {
            historyContainer.innerHTML = this.renderImportHistory();
        }
    }
}
