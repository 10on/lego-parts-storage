// –í–∏–¥ –∫—É—á–∏ –¥–µ—Ç–∞–ª–µ–π
class PileView {
    constructor() {
        this.pileItems = [];
        this.selectedItems = new Set();
    }

    render(pileItems = []) {
        this.pileItems = pileItems;
        const container = document.getElementById('pile-content');
        if (!container) return;

        if (pileItems.length === 0) {
            container.innerHTML = this.renderEmptyState();
        } else {
            container.innerHTML = pileItems.map(item => this.renderPileItem(item)).join('');
        }

        this.setupEventListeners();
    }

    renderEmptyState() {
        return `
            <div class="empty-state">
                <div class="empty-state-content">
                    <h3>–ö—É—á–∞ –ø—É—Å—Ç–∞</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ –∫—É—á—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</p>
                    <button class="btn btn-primary" id="add-first-pile-item">–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å</button>
                </div>
            </div>
        `;
    }

    renderPileItem(item) {
        const lastUsed = new Date(item.lastUsed).toLocaleDateString('ru-RU');
        
        return `
            <div class="pile-item" data-item-id="${item.id}">
                <img src="${item.image}" alt="${item.name}" class="pile-item-image" onerror="this.style.display='none'">
                <div class="pile-item-info">
                    <div class="pile-item-name">${item.name}</div>
                    <div class="pile-item-part-id">Part ID: ${item.partId}</div>
                    <div class="pile-item-color">–¶–≤–µ—Ç: ${item.color}</div>
                    <div class="pile-item-last-used">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${lastUsed}</div>
                </div>
                <div class="pile-item-actions">
                    <div class="pile-item-quantity-controls">
                        <button class="quantity-btn" data-action="decrease">-</button>
                        <input type="number" class="quantity-input" value="${item.quantity || ''}" min="0">
                        <button class="quantity-btn" data-action="increase">+</button>
                    </div>
                    <button class="btn btn-sm btn-outline" data-action="edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        ‚úèÔ∏è
                    </button>
                    <button class="btn btn-sm btn-outline" data-action="distribute" title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å">
                        üì§
                    </button>
                    <button class="btn btn-sm btn-outline" data-action="delete" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                </div>
            </div>
        `;
    }

    setupEventListeners() {
        // –ö–ª–∏–∫–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫—É—á–∏
        document.querySelectorAll('.pile-item').forEach(item => {
            item.addEventListener('click', (e) => {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –¥–µ–π—Å—Ç–≤–∏–π
                if (e.target.closest('.pile-item-actions')) {
                    return;
                }
                
                this.toggleItemSelection(item);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        document.querySelectorAll('[data-action="increase"]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.changeQuantity(btn, 1);
            });
        });

        document.querySelectorAll('[data-action="decrease"]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.changeQuantity(btn, -1);
            });
        });

        // –ü—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        document.querySelectorAll('.quantity-input').forEach(input => {
            input.addEventListener('change', (e) => {
                this.updateQuantity(e.target);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        document.querySelectorAll('[data-action="edit"]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const itemId = btn.closest('.pile-item').dataset.itemId;
                this.editItem(itemId);
            });
        });

        document.querySelectorAll('[data-action="distribute"]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const itemId = btn.closest('.pile-item').dataset.itemId;
                this.distributeItem(itemId);
            });
        });

        document.querySelectorAll('[data-action="delete"]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const itemId = btn.closest('.pile-item').dataset.itemId;
                this.deleteItem(itemId);
            });
        });

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const addFirstBtn = document.getElementById('add-first-pile-item');
        if (addFirstBtn) {
            addFirstBtn.addEventListener('click', () => {
                this.showAddItemModal();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
        const addBtn = document.getElementById('add-pile-item-btn');
        if (addBtn) {
            addBtn.addEventListener('click', () => {
                this.showAddItemModal();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        const distributeBtn = document.getElementById('distribute-pile-btn');
        if (distributeBtn) {
            distributeBtn.addEventListener('click', () => {
                this.showDistributeModal();
            });
        }
    }

    toggleItemSelection(item) {
        const itemId = item.dataset.itemId;
        
        if (this.selectedItems.has(itemId)) {
            this.selectedItems.delete(itemId);
            item.classList.remove('selected');
        } else {
            this.selectedItems.add(itemId);
            item.classList.add('selected');
        }
    }

    changeQuantity(btn, delta) {
        const input = btn.parentElement.querySelector('.quantity-input');
        const currentValue = input.value ? parseInt(input.value) : 0;
        const newValue = Math.max(0, currentValue + delta);
        input.value = newValue || '';
        this.updateQuantity(input);
    }

    async updateQuantity(input) {
        const itemId = input.closest('.pile-item').dataset.itemId;
        const quantityValue = input.value;
        const newQuantity = quantityValue ? parseInt(quantityValue) : null;
        
        if (quantityValue && (isNaN(newQuantity) || newQuantity < 0)) {
            input.value = '';
            return;
        }

        const item = this.pileItems.find(i => i.id === itemId);
        if (item) {
            item.quantity = newQuantity;
            item.lastUsed = new Date().toISOString();
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            if (window.app) {
                await window.app.autoSave();
                window.app.showNotification('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
            }
        }
    }

    editItem(itemId) {
        const item = this.pileItems.find(i => i.id === itemId);
        if (!item) return;

        const content = `
            <form id="edit-pile-item-form">
                <div class="form-group">
                    <label class="form-label">Part ID</label>
                    <input type="text" class="form-input" id="edit-part-id" value="${item.partId}" required>
                </div>
                <div class="form-group">
                    <label class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                    <input type="text" class="form-input" id="edit-name" value="${item.name}" required>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                        <input type="number" class="form-input" id="edit-quantity" value="${item.quantity}" min="0">
                    </div>
                    <div class="form-group">
                        <label class="form-label">–¶–≤–µ—Ç</label>
                        <input type="text" class="form-input" id="edit-color" value="${item.color}">
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-label">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</label>
                    <input type="url" class="form-input" id="edit-image" value="${item.image}">
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
                </div>
            </form>
        `;

        if (window.app) {
            window.app.showModal('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å', content);
            
            document.getElementById('edit-pile-item-form').addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveItemChanges(itemId);
            });
        }
    }

    saveItemChanges(itemId) {
        const partId = document.getElementById('edit-part-id').value;
        const name = document.getElementById('edit-name').value;
        const quantity = parseInt(document.getElementById('edit-quantity').value);
        const color = document.getElementById('edit-color').value;
        const image = document.getElementById('edit-image').value;

        const item = this.pileItems.find(i => i.id === itemId);
        if (item) {
            item.partId = partId;
            item.name = name;
            item.quantity = quantity;
            item.color = color;
            item.image = image;
            item.lastUsed = new Date().toISOString();

            this.render(this.pileItems);
            
            if (window.app) {
                window.app.hideModal();
                window.app.showNotification('–î–µ—Ç–∞–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
            }
        }
    }

    deleteItem(itemId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –¥–µ—Ç–∞–ª—å –∏–∑ –∫—É—á–∏?')) {
            const index = this.pileItems.findIndex(i => i.id === itemId);
            if (index > -1) {
                this.pileItems.splice(index, 1);
                this.render(this.pileItems);
                
                if (window.app) {
                    window.app.showNotification('–î–µ—Ç–∞–ª—å —É–¥–∞–ª–µ–Ω–∞!', 'success');
                }
            }
        }
    }

    distributeItem(itemId) {
        const item = this.pileItems.find(i => i.id === itemId);
        if (!item) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const containers = window.app?.containers || [];
        if (containers.length === 0) {
            alert('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è');
            return;
        }

        const content = `
            <div class="distribute-modal">
                <h4>–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å "${item.name}"</h4>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</p>
                <div class="containers-list">
                    ${containers.map(container => `
                        <div class="container-option" data-container-id="${container.id}">
                            <h5>${container.name}</h5>
                            <p>${container.rows}√ó${container.cols} —è—á–µ–µ–∫</p>
                        </div>
                    `).join('')}
                </div>
                <div class="form-group">
                    <label class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</label>
                    <input type="number" class="form-input" id="distribute-quantity" value="${item.quantity}" min="1" max="${item.quantity}">
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-primary" id="confirm-distribute">–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å</button>
                </div>
            </div>
        `;

        if (window.app) {
            window.app.showModal('–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ—Ç–∞–ª—å', content);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            document.querySelectorAll('.container-option').forEach(option => {
                option.addEventListener('click', () => {
                    document.querySelectorAll('.container-option').forEach(o => o.classList.remove('selected'));
                    option.classList.add('selected');
                });
            });

            document.getElementById('confirm-distribute').addEventListener('click', () => {
                this.confirmDistribute(itemId);
            });
        }
    }

    confirmDistribute(itemId) {
        const selectedContainer = document.querySelector('.container-option.selected');
        const quantity = parseInt(document.getElementById('distribute-quantity').value);
        
        if (!selectedContainer) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è');
            return;
        }

        const containerId = selectedContainer.dataset.containerId;
        const item = this.pileItems.find(i => i.id === itemId);
        
        if (item && quantity > 0 && quantity <= item.quantity) {
            // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫—É—á–µ
            item.quantity -= quantity;
            if (item.quantity <= 0) {
                this.deleteItem(itemId);
            } else {
                this.render(this.pileItems);
            }
            
            if (window.app) {
                window.app.hideModal();
                window.app.showNotification(`–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ ${quantity} –¥–µ—Ç–∞–ª–µ–π!`, 'success');
            }
        }
    }

    showAddItemModal() {
        const content = `
            <form id="add-pile-item-form">
                <div class="form-group">
                    <label class="form-label">Part ID</label>
                    <input type="text" class="form-input" id="new-part-id" placeholder="3001" required>
                </div>
                <div class="form-group">
                    <label class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                    <input type="text" class="form-input" id="new-name" placeholder="Brick 2x4" required>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                        <input type="number" class="form-input" id="new-quantity" placeholder="–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ">
                    </div>
                    <div class="form-group">
                        <label class="form-label">–¶–≤–µ—Ç</label>
                        <input type="text" class="form-input" id="new-color" placeholder="Red">
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-label">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</label>
                    <input type="url" class="form-input" id="new-image" placeholder="https://...">
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">–î–æ–±–∞–≤–∏—Ç—å –≤ –∫—É—á—É</button>
                </div>
            </form>
        `;

        if (window.app) {
            window.app.showModal('–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å –≤ –∫—É—á—É', content);
            
            document.getElementById('add-pile-item-form').addEventListener('submit', (e) => {
                e.preventDefault();
                this.addNewItem();
            });
        }
    }

    async addNewItem() {
        const partId = document.getElementById('new-part-id').value;
        const name = document.getElementById('new-name').value;
        const quantityValue = document.getElementById('new-quantity').value;
        const quantity = quantityValue ? parseInt(quantityValue) : null;
        const color = document.getElementById('new-color').value;
        const image = document.getElementById('new-image').value;

        const newItem = {
            id: `pile-${Date.now()}`,
            partId,
            name,
            color,
            colorId: await this.getColorId(color),
            quantity,
            image,
            lastUsed: new Date().toISOString()
        };

        this.pileItems.push(newItem);
        this.render(this.pileItems);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (window.app) {
            await window.app.autoSave();
            window.app.hideModal();
            window.app.showNotification('–î–µ—Ç–∞–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫—É—á—É!', 'success');
        }
    }

    showDistributeModal() {
        if (this.selectedItems.size === 0) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è');
            return;
        }

        // –õ–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', Array.from(this.selectedItems));
    }

    async getColorId(color) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç –∏–∑ BrickLink –¥–∞–Ω–Ω—ã—Ö
        if (!window.brickLinkData || !window.brickLinkData.isLoaded) {
            console.warn('BrickLink data not loaded, using fallback color ID');
            return '1'; // Fallback –∫ –±–µ–ª–æ–º—É —Ü–≤–µ—Ç—É
        }
        
        try {
            const colorData = await window.brickLinkData.getColorByName(color);
            return colorData ? colorData.id.toString() : '1';
        } catch (error) {
            console.error('Error getting color ID:', error);
            return '1'; // Fallback –∫ –±–µ–ª–æ–º—É —Ü–≤–µ—Ç—É
        }
    }
}
