// –ì–ª–∞–≤–Ω—ã–π –≤–∏–¥ - —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
class HomeView {
    constructor() {
        this.containers = [];
    }

    render(containers = []) {
        console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:', containers.length, '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤');
        this.containers = containers;
        const container = document.getElementById('containers-grid');
        if (!container) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç containers-grid –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (containers.length === 0) {
            container.innerHTML = this.renderEmptyState();
        } else {
            container.innerHTML = containers.map(container => this.renderContainerCard(container)).join('');
        }

        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        this.setupEventListeners();
    }

    renderEmptyState() {
        return `
            <div class="empty-state">
                <div class="empty-state-content">
                    <h3>–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è LEGO –¥–µ—Ç–∞–ª–µ–π</p>
                    <button class="btn btn-primary" id="create-first-container">–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä</button>
                </div>
            </div>
        `;
    }

    renderContainerCard(container) {
        const stats = this.calculateContainerStats(container);
        const typeIcon = this.getTypeIcon(container.type);
        const lastUpdated = new Date(container.updatedAt).toLocaleDateString('ru-RU');
        const containerColor = container.color || '#e0e0e0';

        return `
            <div class="container-card" data-container-id="${container.id}">
                <div class="container-card-header">
                    <h3>${typeIcon} ${container.name}</h3>
                    <div class="container-actions">
                        <button class="btn btn-sm btn-outline" data-action="clone" title="–ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å">
                            üìã
                        </button>
                        <button class="btn btn-sm btn-outline" data-action="edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                            ‚úèÔ∏è
                        </button>
                        <button class="btn btn-sm btn-outline" data-action="delete" title="–£–¥–∞–ª–∏—Ç—å">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
                <div class="container-visualization">
                    ${this.renderContainerGrid(container, containerColor)}
                </div>
                <p class="container-description">${this.getTypeDescription(container.type)}</p>
                <div class="container-stats">
                    <div class="stat">
                        <span class="stat-label">–†–∞–∑–º–µ—Ä:</span>
                        <span class="stat-value">${container.rows}√ó${container.cols}</span>
                    </div>
                    <div class="stat">
                        <span class="stat-label">–ó–∞–ø–æ–ª–Ω–µ–Ω–æ:</span>
                        <span class="stat-value">${stats.filledCells}/${stats.totalCells}</span>
                    </div>
                    <div class="stat">
                        <span class="stat-label">–û–±–Ω–æ–≤–ª–µ–Ω–æ:</span>
                        <span class="stat-value">${lastUpdated}</span>
                    </div>
                </div>
                <div class="container-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${stats.fillPercentage}%"></div>
                    </div>
                    <span class="progress-text">${Math.round(stats.fillPercentage)}%</span>
                </div>
            </div>
        `;
    }

    calculateContainerStats(container) {
        const totalCells = container.rows * container.cols;
        const filledCells = container.cells.filter(cell => cell !== null).length;
        const fillPercentage = totalCells > 0 ? (filledCells / totalCells) * 100 : 0;

        return {
            totalCells,
            filledCells,
            fillPercentage
        };
    }

    getTypeIcon(type) {
        const icons = {
            'cabinet': 'üì¶',
            'box': 'üìÅ',
            'pile': 'üìö'
        };
        return icons[type] || 'üì¶';
    }

    renderContainerGrid(container, color) {
        const { rows, cols, cells, type } = container;
        const borderColor = this.darkenColor(color, 20);
        
        // –î–ª—è –∫—É—á –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ —Å–µ—Ç–∫–∏
        if (type === 'pile') {
            return `
                <div class="container-pile-preview" 
                     style="background-color: ${color};
                            border: 2px solid ${borderColor};">
                    <div class="pile-icon">üìö</div>
                    <div class="pile-text">–ö—É—á–∞ –¥–µ—Ç–∞–ª–µ–π</div>
                    <div class="pile-count">${cells ? cells.filter(c => c !== null).length : 0} –¥–µ—Ç–∞–ª–µ–π</div>
                </div>
            `;
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è cabinet –∏ box
        let gridHtml = `
            <div class="container-grid-preview" 
                 style="grid-template-columns: repeat(${cols}, 1fr); 
                        grid-template-rows: repeat(${rows}, 1fr);
                        background-color: ${color};
                        border: 2px solid ${borderColor};">
        `;
        
        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
        for (let row = 0; row < rows; row++) {
            for (let col = 0; col < cols; col++) {
                const cellIndex = row * cols + col;
                const cell = cells[cellIndex];
                const isFilled = cell !== null;
                
                gridHtml += `
                    <div class="preview-cell ${isFilled ? 'filled' : 'empty'}" 
                         style="background-color: ${isFilled ? '#f5f5f5' : '#f5f5f5'};
                                border: 1px solid ${this.darkenColor(color, 10)};">
                        ${isFilled ? '‚óè' : ''}
                    </div>
                `;
            }
        }
        
        gridHtml += '</div>';
        
        return gridHtml;
    }
    
    darkenColor(color, percent) {
        const num = parseInt(color.replace("#", ""), 16);
        const amt = Math.round(2.55 * percent);
        const R = (num >> 16) - amt;
        const G = (num >> 8 & 0x00FF) - amt;
        const B = (num & 0x0000FF) - amt;
        return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
            (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
            (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
    }

    getTypeDescription(type) {
        const descriptions = {
            'cabinet': '–ö–∞—Å—Å–µ—Ç–Ω–∏—Ü–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π',
            'box': '–ö–æ—Ä–æ–±–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
            'pile': '–ö—É—á–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –¥–µ—Ç–∞–ª—è–º'
        };
        return descriptions[type] || '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π';
    }

    setupEventListeners() {
        console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const containerCards = document.querySelectorAll('.container-card');
        console.log('üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:', containerCards.length);
        
        containerCards.forEach(card => {
            card.addEventListener('click', (e) => {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –¥–µ–π—Å—Ç–≤–∏–π
                if (e.target.closest('.container-actions')) {
                    return;
                }
                
                const containerId = card.dataset.containerId;
                this.openContainer(containerId);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        const cloneButtons = document.querySelectorAll('[data-action="clone"]');
        console.log('üîÑ –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', cloneButtons.length);
        
        cloneButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const containerId = btn.closest('.container-card').dataset.containerId;
                console.log('üîÑ –ö–Ω–æ–ø–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', containerId);
                this.showCloneModal(containerId);
            });
        });

        document.querySelectorAll('[data-action="edit"]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const containerId = btn.closest('.container-card').dataset.containerId;
                this.editContainer(containerId);
            });
        });

        document.querySelectorAll('[data-action="delete"]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const containerId = btn.closest('.container-card').dataset.containerId;
                this.deleteContainer(containerId);
            });
        });

        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const createFirstBtn = document.getElementById('create-first-container');
        if (createFirstBtn) {
            createFirstBtn.addEventListener('click', () => {
                if (window.app) {
                    window.app.showAddContainerModal();
                }
            });
        }
    }

    openContainer(containerId) {
        const container = this.containers.find(c => c.id === containerId);
        if (container) {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∏–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if (window.app) {
                window.app.containerView.setContainer(container);
                // –ü–µ—Ä–µ–¥–∞–µ–º ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ URL
                window.location.hash = `container/${containerId}`;
            }
        }
    }

    editContainer(containerId) {
        const container = this.containers.find(c => c.id === containerId);
        if (container) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const content = `
                <form id="edit-container-form">
                    <div class="form-group">
                        <label class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞</label>
                        <input type="text" class="form-input" id="edit-container-name" value="${container.name}" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">–¢–∏–ø</label>
                        <select class="form-select" id="edit-container-type">
                            <option value="cabinet" ${container.type === 'cabinet' ? 'selected' : ''}>–ö–∞—Å—Å–µ—Ç–Ω–∏—Ü–∞</option>
                            <option value="box" ${container.type === 'box' ? 'selected' : ''}>–ö–æ—Ä–æ–±–∫–∞</option>
                            <option value="pile" ${container.type === 'pile' ? 'selected' : ''}>–ö—É—á–∞</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
                    </div>
                </form>
            `;
            
            if (window.app) {
                window.app.showModal('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', content);
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
                document.getElementById('edit-container-form').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.saveContainerChanges(containerId);
                });
            }
        }
    }

    saveContainerChanges(containerId) {
        const name = document.getElementById('edit-container-name').value;
        const type = document.getElementById('edit-container-type').value;
        
        const container = this.containers.find(c => c.id === containerId);
        if (container) {
            container.name = name;
            container.type = type;
            container.updatedAt = new Date().toISOString();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.render(this.containers);
            
            if (window.app) {
                window.app.hideModal();
                window.app.showNotification('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
            }
        }
    }

    showCloneModal(containerId) {
        console.log('üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', containerId);
        console.log('üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:', this.containers.map(c => ({ id: c.id, name: c.name })));
        
        const container = this.containers.find(c => c.id === containerId);
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', containerId);
            return;
        }
        
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω:', container.name);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ window.app –¥–æ—Å—Ç—É–ø–µ–Ω
        if (!window.app) {
            console.error('‚ùå window.app –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }

        console.log('üîß –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...');
        const content = `
            <div class="clone-modal-content">
                <p>–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä "<strong>${container.name}</strong>":</p>
                <div class="clone-options">
                    <label class="clone-option">
                        <input type="radio" name="clone-type" value="empty" checked>
                        <div class="option-content">
                            <div class="option-icon">üì¶</div>
                            <div class="option-text">
                                <strong>–ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä</strong>
                                <small>–¢–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã</small>
                            </div>
                        </div>
                    </label>
                    <label class="clone-option">
                        <input type="radio" name="clone-type" value="with-content">
                        <div class="option-content">
                            <div class="option-icon">üìã</div>
                            <div class="option-text">
                                <strong>–° —Å–æ–¥–µ—Ä–∂–∏–º—ã–º</strong>
                                <small>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ</small>
                            </div>
                        </div>
                    </label>
                </div>
                <div class="clone-actions">
                    <button class="btn btn-primary" id="confirm-clone-btn">–ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button class="btn btn-secondary" id="cancel-clone-btn">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        `;

        if (window.app) {
            window.app.showModal('–ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', content);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
            const confirmBtn = document.getElementById('confirm-clone-btn');
            const cancelBtn = document.getElementById('cancel-clone-btn');
            
            if (confirmBtn) {
                confirmBtn.addEventListener('click', () => {
                    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å" –Ω–∞–∂–∞—Ç–∞');
                    this.cloneContainer(containerId);
                });
            } else {
                console.error('‚ùå –ö–Ω–æ–ø–∫–∞ confirm-clone-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            if (cancelBtn) {
                cancelBtn.addEventListener('click', () => {
                    console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" –Ω–∞–∂–∞—Ç–∞');
                    window.app.hideModal();
                });
            } else {
                console.error('‚ùå –ö–Ω–æ–ø–∫–∞ cancel-clone-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
        }
    }

    async cloneContainer(containerId) {
        const cloneType = document.querySelector('input[name="clone-type"]:checked').value;
        const includeContent = cloneType === 'with-content';
        
        if (window.app) {
            // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            const originalContainer = window.app.containers.find(c => c.id === containerId);
            if (!originalContainer) {
                window.app.showNotification('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            let clonedContainer;
            if (originalContainer && typeof originalContainer.clone === 'function') {
                // –ï—Å–ª–∏ —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Container
                clonedContainer = originalContainer.clone(includeContent);
            } else {
                // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç, —Å–æ–∑–¥–∞–µ–º –∫–ª–æ–Ω –≤—Ä—É—á–Ω—É—é
                clonedContainer = this.cloneContainerData(originalContainer, includeContent);
            }
            
            if (clonedContainer) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –º–∞—Å—Å–∏–≤
                window.app.containers.push(clonedContainer);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await window.app.saveProject();
                
                // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                this.render(window.app.containers);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                window.app.hideModal();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const message = includeContent ? 
                    '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º!' : 
                    '–ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω!';
                window.app.showNotification(message, 'success');
            } else {
                window.app.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', 'error');
            }
        }
    }

    cloneContainerData(originalContainer, includeContent = false) {
        const clonedContainer = {
            id: Date.now().toString(36) + Math.random().toString(36).substr(2),
            name: `${originalContainer.name} (–∫–æ–ø–∏—è)`,
            type: originalContainer.type,
            rows: originalContainer.rows,
            cols: originalContainer.cols,
            color: originalContainer.color,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        if (includeContent && originalContainer.cells) {
            // –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            clonedContainer.cells = originalContainer.cells.map(cell => {
                if (!cell) return null;
                
                // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —è—á–µ–π–∫–∏
                const clonedCell = {
                    type: cell.type,
                    partId: cell.partId,
                    name: cell.name,
                    color: cell.color,
                    colorId: cell.colorId,
                    quantity: cell.quantity,
                    image: cell.image,
                    lastUpdated: cell.lastUpdated
                };

                // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞, –∫–æ–ø–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                if (cell.type === 'merged') {
                    clonedCell.cellCount = cell.cellCount;
                    clonedCell.items = cell.items ? cell.items.map(item => ({
                        ...item,
                        id: Date.now().toString(36) + Math.random().toString(36).substr(2) // –ù–æ–≤—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    })) : [];
                }

                return clonedCell;
            });
        } else {
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å–µ—Ç–∫—É —Ç–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞
            clonedContainer.cells = Array(originalContainer.rows * originalContainer.cols).fill(null);
        }

        return clonedContainer;
    }

    async deleteContainer(containerId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            const index = this.containers.findIndex(c => c.id === containerId);
            if (index > -1) {
                // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑ –º–∞—Å—Å–∏–≤–∞
                this.containers.splice(index, 1);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
                if (window.app) {
                    window.app.containers = this.containers;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage
                    await window.app.saveProject();
                    
                    window.app.showNotification('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–¥–∞–ª–µ–Ω!', 'success');
                }
                
                // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                this.render(this.containers);
            }
        }
    }
}
