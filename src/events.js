// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
class EventManager {
    constructor() {
        this.handlers = new Map();
        this.init();
    }

    init() {
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            this.handleKeyboardShortcuts(e);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –≤–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('click', (e) => {
            this.handleGlobalClick(e);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            this.handleResize();
        });
    }

    handleKeyboardShortcuts(e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ input/textarea
        if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
            return;
        }

        switch (e.key) {
            case '/':
                e.preventDefault();
                this.focusSearch();
                break;
                
            case 'Escape':
                this.handleEscape();
                break;
                
            case 'Enter':
                if (e.ctrlKey || e.metaKey) {
                    e.preventDefault();
                    this.handleCtrlEnter();
                }
                break;
        }

        // –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à
        if (e.altKey) {
            switch (e.key) {
                case 'ArrowRight':
                    e.preventDefault();
                    this.handleAltArrowRight();
                    break;
            }
        }

        if (e.shiftKey) {
            switch (e.key) {
                case 'ArrowRight':
                    e.preventDefault();
                    this.handleShiftArrowRight();
                    break;
            }
        }

        if (e.key === 'x' || e.key === 'X') {
            e.preventDefault();
            this.handleSwapCells();
        }
    }

    handleGlobalClick(e) {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        if (e.target.classList.contains('modal-overlay')) {
            if (window.app) {
                window.app.hideModal();
            }
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (e.target.classList.contains('notification-close')) {
            e.target.closest('.notification')?.remove();
        }
    }

    handleResize() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–µ—Ç–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        if (window.app && window.app.containerView) {
            window.app.containerView.updateGridSize();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
    focusSearch() {
        // –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ
        console.log('üîç –§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫');
    }

    handleEscape() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
        if (window.app) {
            window.app.hideModal();
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —è—á–µ–µ–∫
        const cellEditor = document.querySelector('.cell-editor');
        if (cellEditor) {
            cellEditor.remove();
        }
    }

    handleCtrlEnter() {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if (window.app) {
            const currentView = window.app.getCurrentView();
            if (currentView === 'container') {
                window.app.containerView.save();
            }
        }
    }

    handleAltArrowRight() {
        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        console.log('üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞');
    }

    handleShiftArrowRight() {
        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        console.log('‚ÜîÔ∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞');
    }

    handleSwapCells() {
        // –û–±–º–µ–Ω —è—á–µ–µ–∫
        console.log('üîÑ –û–±–º–µ–Ω —è—á–µ–µ–∫');
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    on(event, handler) {
        if (!this.handlers.has(event)) {
            this.handlers.set(event, []);
        }
        this.handlers.get(event).push(handler);
    }

    off(event, handler) {
        if (this.handlers.has(event)) {
            const handlers = this.handlers.get(event);
            const index = handlers.indexOf(handler);
            if (index > -1) {
                handlers.splice(index, 1);
            }
        }
    }

    emit(event, data) {
        if (this.handlers.has(event)) {
            this.handlers.get(event).forEach(handler => {
                handler(data);
            });
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π
window.eventManager = new EventManager();
