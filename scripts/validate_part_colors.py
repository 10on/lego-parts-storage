#!/usr/bin/env python3
"""
Part Colors Validator
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö partColors —Å–æ–≥–ª–∞—Å–Ω–æ SPEC-PART-COLOR-MAP_v2.md
"""

import json
import gzip
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
import argparse
import sys

class PartColorsValidator:
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.metrics = {}
    
    def validate_lcx_file(self, lcx_file: Path) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç LCX —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ partColors"""
        print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è LCX —Ñ–∞–π–ª–∞: {lcx_file}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º LCX —Ñ–∞–π–ª
        try:
            if lcx_file.suffix == '.gz':
                with gzip.open(lcx_file, 'rt', encoding='utf-8') as f:
                    lcx_data = json.load(f)
            else:
                with open(lcx_file, 'r', encoding='utf-8') as f:
                    lcx_data = json.load(f)
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LCX —Ñ–∞–π–ª–∞: {e}")
            return self.get_validation_result()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É LCX
        self.validate_lcx_structure(lcx_data)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É partColors
        if 'tables' in lcx_data and 'partColors' in lcx_data['tables']:
            self.validate_part_colors_table(lcx_data['tables']['partColors'])
        else:
            self.errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ partColors –≤ LCX —Ñ–∞–π–ª–µ")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        if 'tables' in lcx_data:
            if 'colors' in lcx_data['tables']:
                self.validate_colors_table(lcx_data['tables']['colors'])
            if 'parts' in lcx_data['tables']:
                self.validate_parts_table(lcx_data['tables']['parts'])
        
        return self.get_validation_result()
    
    def validate_lcx_structure(self, lcx_data: Dict[str, Any]):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É LCX —Ñ–∞–π–ª–∞"""
        required_fields = ['schemaVersion', 'source', 'version', 'tables']
        
        for field in required_fields:
            if field not in lcx_data:
                self.errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é —Å—Ö–µ–º—ã
        if 'schemaVersion' in lcx_data and lcx_data['schemaVersion'] != 1:
            self.warnings.append(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã: {lcx_data['schemaVersion']}")
    
    def validate_part_colors_table(self, part_colors_table: Dict[str, Any]):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É partColors —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if 'cols' not in part_colors_table or 'rows' not in part_colors_table:
            self.errors.append("–¢–∞–±–ª–∏—Ü–∞ partColors –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è 'cols' –∏ 'rows'")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É –∫–æ–ª–æ–Ω–æ–∫
        expected_cols = ['partId', 'colorId', 'hasImg']
        if part_colors_table['cols'] != expected_cols:
            self.errors.append(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ö–µ–º–∞ –∫–æ–ª–æ–Ω–æ–∫ partColors. –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_cols}, –ø–æ–ª—É—á–µ–Ω–æ: {part_colors_table['cols']}")
            return
        
        rows = part_colors_table['rows']
        if not isinstance(rows, list):
            self.errors.append("–ü–æ–ª–µ 'rows' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º")
            return
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        for i, row in enumerate(rows):
            self.validate_part_color_row(row, i + 1)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self.compute_part_colors_metrics(rows)
    
    def validate_part_color_row(self, row: List[Any], row_num: int):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã partColors"""
        if not isinstance(row, list) or len(row) != 3:
            self.errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∏–∑ 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            return
        
        part_id, color_id, has_img = row
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è partId
        if not isinstance(part_id, str) or not part_id.strip():
            self.errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: partId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        elif part_id != part_id.strip():
            self.warnings.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: partId —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è colorId
        if not isinstance(color_id, int) or color_id < 0:
            self.errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: colorId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º >= 0")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è hasImg
        if has_img is not None and not isinstance(has_img, bool):
            self.errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: hasImg –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true, false –∏–ª–∏ null")
    
    def validate_colors_table(self, colors_table: Dict[str, Any]):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É colors"""
        if 'cols' not in colors_table or 'rows' not in colors_table:
            return
        
        expected_cols = ['id', 'name', 'rgb']
        if colors_table['cols'] != expected_cols:
            self.warnings.append(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –∫–æ–ª–æ–Ω–æ–∫ colors: {colors_table['cols']}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ partColors
        self.color_ids = set()
        for row in colors_table['rows']:
            if len(row) >= 1 and isinstance(row[0], int):
                self.color_ids.add(row[0])
    
    def validate_parts_table(self, parts_table: Dict[str, Any]):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É parts"""
        if 'cols' not in parts_table or 'rows' not in parts_table:
            return
        
        expected_cols = ['blId', 'name', 'catId']
        if parts_table['cols'] != expected_cols:
            self.warnings.append(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –∫–æ–ª–æ–Ω–æ–∫ parts: {parts_table['cols']}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ partColors
        self.part_ids = set()
        for row in parts_table['rows']:
            if len(row) >= 1 and isinstance(row[0], str):
                self.part_ids.add(row[0])
    
    def compute_part_colors_metrics(self, rows: List[List[Any]]):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        total_links = len(rows)
        unique_parts = set()
        unique_colors = set()
        has_img_true = 0
        has_img_false = 0
        has_img_null = 0
        unknown_colors = 0
        unknown_parts = 0
        
        for row in rows:
            if len(row) >= 3:
                part_id, color_id, has_img = row
                
                unique_parts.add(part_id)
                unique_colors.add(color_id)
                
                if has_img is True:
                    has_img_true += 1
                elif has_img is False:
                    has_img_false += 1
                else:
                    has_img_null += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ –¥–µ—Ç–∞–ª–∏
                if hasattr(self, 'color_ids') and color_id not in self.color_ids:
                    unknown_colors += 1
                
                if hasattr(self, 'part_ids') and part_id not in self.part_ids:
                    unknown_parts += 1
        
        self.metrics = {
            'total_links': total_links,
            'unique_parts': len(unique_parts),
            'unique_colors': len(unique_colors),
            'has_img_true': has_img_true,
            'has_img_false': has_img_false,
            'has_img_null': has_img_null,
            'unknown_colors': unknown_colors,
            'unknown_parts': unknown_parts,
            'unknown_colors_pct': (unknown_colors / total_links * 100) if total_links > 0 else 0,
            'unknown_parts_pct': (unknown_parts / total_links * 100) if total_links > 0 else 0
        }
    
    def get_validation_result(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        return {
            'valid': len(self.errors) == 0,
            'errors': self.errors,
            'warnings': self.warnings,
            'metrics': self.metrics
        }
    
    def print_validation_report(self, result: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("\n" + "=" * 60)
        print("üìä –û–¢–ß–ï–¢ –û –í–ê–õ–ò–î–ê–¶–ò–ò")
        print("=" * 60)
        
        if result['valid']:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏!")
        
        # –û—à–∏–±–∫–∏
        if result['errors']:
            print(f"\nüö® –û–®–ò–ë–ö–ò ({len(result['errors'])}):")
            for i, error in enumerate(result['errors'], 1):
                print(f"   {i}. {error}")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if result['warnings']:
            print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(result['warnings'])}):")
            for i, warning in enumerate(result['warnings'], 1):
                print(f"   {i}. {warning}")
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        if result['metrics']:
            print(f"\nüìà –ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê:")
            metrics = result['metrics']
            print(f"   –°–≤—è–∑–µ–π –≤—Å–µ–≥–æ: {metrics.get('total_links', 0):,}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π: {metrics.get('unique_parts', 0):,}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: {metrics.get('unique_colors', 0):,}")
            print(f"   hasImg=true: {metrics.get('has_img_true', 0):,}")
            print(f"   hasImg=false: {metrics.get('has_img_false', 0):,}")
            print(f"   hasImg=null: {metrics.get('has_img_null', 0):,}")
            print(f"   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: {metrics.get('unknown_colors', 0):,} ({metrics.get('unknown_colors_pct', 0):.1f}%)")
            print(f"   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π: {metrics.get('unknown_parts', 0):,} ({metrics.get('unknown_parts_pct', 0):.1f}%)")
        
        print("=" * 60)
        
        return result['valid']


def main():
    parser = argparse.ArgumentParser(description='–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö partColors')
    parser.add_argument('lcx_file', type=Path, help='LCX —Ñ–∞–π–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
    parser.add_argument('--json', action='store_true', help='–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ')
    
    args = parser.parse_args()
    
    if not args.lcx_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.lcx_file}")
        sys.exit(1)
    
    validator = PartColorsValidator()
    result = validator.validate_lcx_file(args.lcx_file)
    
    if args.json:
        print(json.dumps(result, ensure_ascii=False, indent=2))
    else:
        is_valid = validator.print_validation_report(result)
        sys.exit(0 if is_valid else 1)


if __name__ == "__main__":
    main()
