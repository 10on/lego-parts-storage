#!/usr/bin/env python3
"""
BrickLink Data Fetcher
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å BrickLink
"""

import requests
import browser_cookie3
from pathlib import Path

class BrickLinkFetcher:
    def __init__(self, use_firefox_cookies=True):
        self.base_url = "https://www.bricklink.com/catalogDownload.asp?a=a"
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate, br, zstd',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Origin': 'https://www.bricklink.com',
            'Referer': 'https://www.bricklink.com/catalogDownload.asp',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'same-origin',
            'Sec-Fetch-User': '?1',
            'Priority': 'u=0, i',
            'TE': 'trailers'
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        self.session = requests.Session()
        self.session.headers.update(self.headers)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies –∏–∑ Firefox
        if use_firefox_cookies:
            try:
                firefox_cookies = browser_cookie3.firefox(domain_name='bricklink.com')
                self.session.cookies.update(firefox_cookies)
                cookie_count = len([c for c in firefox_cookies])
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {cookie_count} cookies –∏–∑ Firefox")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies –∏–∑ Firefox: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ cookies –¥–ª—è Part & Color Codes
        self.add_additional_cookies()
        
        # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Å–æ–≥–ª–∞—Å–Ω–æ SPEC-PART-COLOR-MAP_v2.md)
        self.data_types = {
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ
            'part_color_codes': {
                'viewType': '5',
                'itemType': 'S',
                'filename': 'part_color_codes.tab',
                'description': 'Part & Color Codes (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)',
                'required': True
            },
            # –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –¥–∞–Ω–Ω—ã–µ
            'colors': {
                'viewType': '3',
                'itemType': 'S',
                'filename': 'colors.tab',
                'description': 'Colors (–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–û)',
                'required': False
            },
            'parts': {
                'viewType': '0',
                'itemType': 'P',
                'filename': 'parts.tab',
                'description': 'Items (Parts) (–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–û)',
                'required': False
            },
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ
            'categories': {
                'viewType': '2',
                'itemType': 'S',
                'filename': 'categories.tab',
                'description': 'Categories (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)',
                'required': False
            },
            'item_types': {
                'viewType': '1',
                'itemType': 'S',
                'filename': 'item_types.tab',
                'description': 'Item Types (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)',
                'required': False
            }
        }
    
    def add_additional_cookies(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ cookies –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Part & Color Codes"""
        # –ö–ª—é—á–µ–≤—ã–µ cookies –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Part & Color Codes
        additional_cookies = {
            'BLNEWSESSIONID': 'V10FCD61F816536E8DD4FA7B0E6C3AEB2C6103B74148ACAEE752AC3986C61B2E9019EEC80CFFB53A74431BDF0296F8CF6D1',
            'BLHASTOKEN': '1',
            'blckSessionStarted': '1',
            'blCartBuyerID': '-1122976209',
            'catalogView': 'cView=1^&invView=1'
        }
        
        for name, value in additional_cookies.items():
            self.session.cookies.set(name, value, domain='.bricklink.com')
        
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ cookies –¥–ª—è Part & Color Codes")
    
    def fetch_data(self, data_type, output_dir='bricklink_data'):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        if data_type not in self.data_types:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {data_type}")
            return False
        
        config = self.data_types[data_type]
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞
        data = {
            'viewType': config['viewType'],
            'itemType': config['itemType'],
            'itemTypeInv': config['itemType'],
            'itemNo': '',
            'downloadType': 'T'
        }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Part & Color Codes
        if data_type == 'part_color_codes':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Part & Color Codes
            data = {
                'itemType': 'S',
                'viewType': '5',
                'itemTypeInv': 'S',
                'itemNo': '',
                'downloadType': 'T'
            }
        
        print(f"üì• –°–∫–∞—á–∏–≤–∞—é {config['description']}...")
        
        try:
            response = self.session.post(
                self.base_url,
                data=data,
                timeout=30
            )
            response.raise_for_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ TSV –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ HTML
            content_type = response.headers.get('content-type', '').lower()
            content_text = response.text[:200]  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
            if 'text/html' in content_type or content_text.strip().startswith('<!doctype html>'):
                print(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ TSV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {config['description']}")
                print(f"   Content-Type: {content_type}")
                print(f"   –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞: {content_text[:100]}...")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            Path(output_dir).mkdir(exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            filepath = Path(output_dir) / config['filename']
            with open(filepath, 'wb') as f:
                f.write(response.content)
            
            file_size = filepath.stat().st_size
            print(f"‚úÖ {config['description']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω ({file_size:,} bytes)")
            return True
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {config['description']}: {e}")
            return False
    
    def fetch_all(self, output_dir='bricklink_data'):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö"""
        print("üöÄ BrickLink Data Fetcher (SPEC v2)")
        print("=" * 50)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        required_types = [k for k, v in self.data_types.items() if v.get('required', False)]
        recommended_types = [k for k, v in self.data_types.items() if not v.get('required', False)]
        
        success_count = 0
        total_count = len(self.data_types)
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö:")
        for data_type in required_types:
            if self.fetch_data(data_type, output_dir):
                success_count += 1
            print()
        
        # –ó–∞—Ç–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ
        print("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–• –¥–∞–Ω–Ω—ã—Ö:")
        for data_type in recommended_types:
            if self.fetch_data(data_type, output_dir):
                success_count += 1
            print()
        
        print("=" * 50)
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! {success_count}/{total_count} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        output_path = Path(output_dir)
        missing_required = []
        for data_type in required_types:
            filename = self.data_types[data_type]['filename']
            if not (output_path / filename).exists():
                missing_required.append(filename)
        
        if missing_required:
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_required)}")
            print("   –ë–µ–∑ —ç—Ç–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç—É –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ü–≤–µ—Ç–æ–≤!")
        else:
            print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        if output_path.exists():
            print(f"\nüìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path.absolute()}")
            print("\nüìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:")
            for file in sorted(output_path.glob("*.tab")):
                size = file.stat().st_size
                status = "‚úÖ" if file.name not in missing_required else "‚ùå"
                print(f"   {status} {file.name:<25} {size:>10,} bytes")


def main():
    # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    fetcher = BrickLinkFetcher(use_firefox_cookies=True)
    fetcher.fetch_all()


if __name__ == "__main__":
    main()